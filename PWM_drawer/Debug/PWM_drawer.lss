
PWM_drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  00001b7e  00001c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800154  00800154  00001d06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d1  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd7  00000000  00000000  000048a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015bb  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  00006a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9c  00000000  00000000  00006fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cec  00000000  00000000  00007c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 35       	cpi	r26, 0x54	; 84
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e5       	ldi	r26, 0x54	; 84
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 03 	call	0x680	; 0x680 <main>
      8a:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PRV_voidWriteHalfPort>:
	}
}
void LCD_voidClearSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position)
 {
	LCD_voidGoToSpecificPosition(copy_u8LineNumber, copy_u8Position);
	LCD_voidDisplayChar(' ');
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	80 ff       	sbrs	r24, 0
      98:	06 c0       	rjmp	.+12     	; 0xa6 <PRV_voidWriteHalfPort+0x14>
      9a:	41 e0       	ldi	r20, 0x01	; 1
      9c:	64 e0       	ldi	r22, 0x04	; 4
      9e:	80 e0       	ldi	r24, 0x00	; 0
      a0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      a4:	05 c0       	rjmp	.+10     	; 0xb0 <PRV_voidWriteHalfPort+0x1e>
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	64 e0       	ldi	r22, 0x04	; 4
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      b0:	c1 ff       	sbrs	r28, 1
      b2:	06 c0       	rjmp	.+12     	; 0xc0 <PRV_voidWriteHalfPort+0x2e>
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	65 e0       	ldi	r22, 0x05	; 5
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      be:	05 c0       	rjmp	.+10     	; 0xca <PRV_voidWriteHalfPort+0x38>
      c0:	40 e0       	ldi	r20, 0x00	; 0
      c2:	65 e0       	ldi	r22, 0x05	; 5
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      ca:	c2 ff       	sbrs	r28, 2
      cc:	06 c0       	rjmp	.+12     	; 0xda <PRV_voidWriteHalfPort+0x48>
      ce:	41 e0       	ldi	r20, 0x01	; 1
      d0:	66 e0       	ldi	r22, 0x06	; 6
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      d8:	05 c0       	rjmp	.+10     	; 0xe4 <PRV_voidWriteHalfPort+0x52>
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	66 e0       	ldi	r22, 0x06	; 6
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      e4:	c3 ff       	sbrs	r28, 3
      e6:	06 c0       	rjmp	.+12     	; 0xf4 <PRV_voidWriteHalfPort+0x62>
      e8:	41 e0       	ldi	r20, 0x01	; 1
      ea:	67 e0       	ldi	r22, 0x07	; 7
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      f2:	05 c0       	rjmp	.+10     	; 0xfe <PRV_voidWriteHalfPort+0x6c>
      f4:	40 e0       	ldi	r20, 0x00	; 0
      f6:	67 e0       	ldi	r22, 0x07	; 7
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
      fe:	cf 91       	pop	r28
     100:	08 95       	ret

00000102 <LCD_voidSendCommand>:
     102:	cf 93       	push	r28
     104:	c8 2f       	mov	r28, r24
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	62 e0       	ldi	r22, 0x02	; 2
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     11a:	8c 2f       	mov	r24, r28
     11c:	82 95       	swap	r24
     11e:	8f 70       	andi	r24, 0x0F	; 15
     120:	0e 94 49 00 	call	0x92	; 0x92 <PRV_voidWriteHalfPort>
     124:	41 e0       	ldi	r20, 0x01	; 1
     126:	63 e0       	ldi	r22, 0x03	; 3
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     12e:	8f e9       	ldi	r24, 0x9F	; 159
     130:	9f e0       	ldi	r25, 0x0F	; 15
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <LCD_voidSendCommand+0x30>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_voidSendCommand+0x36>
     138:	00 00       	nop
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	63 e0       	ldi	r22, 0x03	; 3
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     144:	8c 2f       	mov	r24, r28
     146:	0e 94 49 00 	call	0x92	; 0x92 <PRV_voidWriteHalfPort>
     14a:	41 e0       	ldi	r20, 0x01	; 1
     14c:	63 e0       	ldi	r22, 0x03	; 3
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	9f e0       	ldi	r25, 0x0F	; 15
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_voidSendCommand+0x56>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <LCD_voidSendCommand+0x5c>
     15e:	00 00       	nop
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	63 e0       	ldi	r22, 0x03	; 3
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <LCD_voidInit>:
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     178:	41 e0       	ldi	r20, 0x01	; 1
     17a:	62 e0       	ldi	r22, 0x02	; 2
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	63 e0       	ldi	r22, 0x03	; 3
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     18c:	41 e0       	ldi	r20, 0x01	; 1
     18e:	64 e0       	ldi	r22, 0x04	; 4
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     196:	41 e0       	ldi	r20, 0x01	; 1
     198:	65 e0       	ldi	r22, 0x05	; 5
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     1a0:	41 e0       	ldi	r20, 0x01	; 1
     1a2:	66 e0       	ldi	r22, 0x06	; 6
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     1aa:	41 e0       	ldi	r20, 0x01	; 1
     1ac:	67 e0       	ldi	r22, 0x07	; 7
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     1b4:	2f e7       	ldi	r18, 0x7F	; 127
     1b6:	85 eb       	ldi	r24, 0xB5	; 181
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <LCD_voidInit+0x4c>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_voidInit+0x56>
     1c4:	00 00       	nop
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	62 e0       	ldi	r22, 0x02	; 2
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	0e 94 49 00 	call	0x92	; 0x92 <PRV_voidWriteHalfPort>
     1e0:	41 e0       	ldi	r20, 0x01	; 1
     1e2:	63 e0       	ldi	r22, 0x03	; 3
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     1ea:	8f e9       	ldi	r24, 0x9F	; 159
     1ec:	9f e0       	ldi	r25, 0x0F	; 15
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_voidInit+0x80>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_voidInit+0x86>
     1f4:	00 00       	nop
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	63 e0       	ldi	r22, 0x03	; 3
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     200:	88 e2       	ldi	r24, 0x28	; 40
     202:	0e 94 81 00 	call	0x102	; 0x102 <LCD_voidSendCommand>
     206:	90 ef       	ldi	r25, 0xF0	; 240
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_voidInit+0x9a>
     20c:	8c e0       	ldi	r24, 0x0C	; 12
     20e:	0e 94 81 00 	call	0x102	; 0x102 <LCD_voidSendCommand>
     212:	20 ef       	ldi	r18, 0xF0	; 240
     214:	2a 95       	dec	r18
     216:	f1 f7       	brne	.-4      	; 0x214 <LCD_voidInit+0xa6>
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 81 00 	call	0x102	; 0x102 <LCD_voidSendCommand>
     21e:	8f e3       	ldi	r24, 0x3F	; 63
     220:	9f e1       	ldi	r25, 0x1F	; 31
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <LCD_voidInit+0xb4>
     226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_voidInit+0xba>
     228:	00 00       	nop
     22a:	86 e0       	ldi	r24, 0x06	; 6
     22c:	0e 94 81 00 	call	0x102	; 0x102 <LCD_voidSendCommand>
     230:	08 95       	ret

00000232 <LCD_voidDisplayChar>:
     232:	cf 93       	push	r28
     234:	c8 2f       	mov	r28, r24
     236:	41 e0       	ldi	r20, 0x01	; 1
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	62 e0       	ldi	r22, 0x02	; 2
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     24a:	8c 2f       	mov	r24, r28
     24c:	82 95       	swap	r24
     24e:	8f 70       	andi	r24, 0x0F	; 15
     250:	0e 94 49 00 	call	0x92	; 0x92 <PRV_voidWriteHalfPort>
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	63 e0       	ldi	r22, 0x03	; 3
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     25e:	8f e9       	ldi	r24, 0x9F	; 159
     260:	9f e0       	ldi	r25, 0x0F	; 15
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCD_voidDisplayChar+0x30>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_voidDisplayChar+0x36>
     268:	00 00       	nop
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	63 e0       	ldi	r22, 0x03	; 3
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     274:	8c 2f       	mov	r24, r28
     276:	0e 94 49 00 	call	0x92	; 0x92 <PRV_voidWriteHalfPort>
     27a:	41 e0       	ldi	r20, 0x01	; 1
     27c:	63 e0       	ldi	r22, 0x03	; 3
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     284:	8f e9       	ldi	r24, 0x9F	; 159
     286:	9f e0       	ldi	r25, 0x0F	; 15
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_voidDisplayChar+0x56>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_voidDisplayChar+0x5c>
     28e:	00 00       	nop
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	63 e0       	ldi	r22, 0x03	; 3
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <DIO_voidSetPinValue>
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <LCD_voidDisplayString>:
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	29 f4       	brne	.+10     	; 0x2b2 <LCD_voidDisplayString+0x14>
     2a8:	0c c0       	rjmp	.+24     	; 0x2c2 <LCD_voidDisplayString+0x24>
     2aa:	0e 94 19 01 	call	0x232	; 0x232 <LCD_voidDisplayChar>
     2ae:	cf 5f       	subi	r28, 0xFF	; 255
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <LCD_voidDisplayString+0x18>
     2b2:	8c 01       	movw	r16, r24
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
     2b6:	f8 01       	movw	r30, r16
     2b8:	ec 0f       	add	r30, r28
     2ba:	f1 1d       	adc	r31, r1
     2bc:	80 81       	ld	r24, Z
     2be:	81 11       	cpse	r24, r1
     2c0:	f4 cf       	rjmp	.-24     	; 0x2aa <LCD_voidDisplayString+0xc>
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <LCD_voidDisplayNumber>:
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	e2 97       	sbiw	r28, 0x32	; 50
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	7f 93       	push	r23
     2e8:	6f 93       	push	r22
     2ea:	80 e6       	ldi	r24, 0x60	; 96
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9f 93       	push	r25
     2f0:	8f 93       	push	r24
     2f2:	8e 01       	movw	r16, r28
     2f4:	0f 5f       	subi	r16, 0xFF	; 255
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	1f 93       	push	r17
     2fa:	0f 93       	push	r16
     2fc:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <sprintf>
     300:	c8 01       	movw	r24, r16
     302:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	e2 96       	adiw	r28, 0x32	; 50
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <LCD_voidGoToSpecificPosition>:
     326:	9f ef       	ldi	r25, 0xFF	; 255
     328:	98 0f       	add	r25, r24
     32a:	92 30       	cpi	r25, 0x02	; 2
     32c:	b8 f4       	brcc	.+46     	; 0x35c <LCD_voidGoToSpecificPosition+0x36>
     32e:	68 32       	cpi	r22, 0x28	; 40
     330:	a8 f4       	brcc	.+42     	; 0x35c <LCD_voidGoToSpecificPosition+0x36>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	29 f0       	breq	.+10     	; 0x340 <LCD_voidGoToSpecificPosition+0x1a>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	21 f4       	brne	.+8      	; 0x342 <LCD_voidGoToSpecificPosition+0x1c>
     33a:	20 e4       	ldi	r18, 0x40	; 64
     33c:	26 0f       	add	r18, r22
     33e:	01 c0       	rjmp	.+2      	; 0x342 <LCD_voidGoToSpecificPosition+0x1c>
     340:	26 2f       	mov	r18, r22
     342:	82 2f       	mov	r24, r18
     344:	80 68       	ori	r24, 0x80	; 128
     346:	0e 94 81 00 	call	0x102	; 0x102 <LCD_voidSendCommand>
     34a:	2f e7       	ldi	r18, 0x7F	; 127
     34c:	82 e3       	ldi	r24, 0x32	; 50
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	21 50       	subi	r18, 0x01	; 1
     352:	80 40       	sbci	r24, 0x00	; 0
     354:	90 40       	sbci	r25, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <LCD_voidGoToSpecificPosition+0x2a>
     358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_voidGoToSpecificPosition+0x34>
     35a:	00 00       	nop
     35c:	08 95       	ret

0000035e <LCD_voidDisplayPWMCalculations>:
}
void LCD_voidDisplayPWMCalculations(u32 copy_u32Frequency,u32 copy_u32PeriodicTime,u32 copy_u32DutyCycle,u32 cop_u32Ton,u32 copu_u32Toff)
{	
     35e:	4f 92       	push	r4
     360:	5f 92       	push	r5
     362:	6f 92       	push	r6
     364:	7f 92       	push	r7
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	28 97       	sbiw	r28, 0x08	; 8
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	69 83       	std	Y+1, r22	; 0x01
     38c:	7a 83       	std	Y+2, r23	; 0x02
     38e:	8b 83       	std	Y+3, r24	; 0x03
     390:	9c 83       	std	Y+4, r25	; 0x04
     392:	29 01       	movw	r4, r18
     394:	3a 01       	movw	r6, r20
     396:	ed 82       	std	Y+5, r14	; 0x05
     398:	fe 82       	std	Y+6, r15	; 0x06
     39a:	0f 83       	std	Y+7, r16	; 0x07
     39c:	18 87       	std	Y+8, r17	; 0x08
LCD_voidGoToSpecificPosition(1,0);
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString((u8*)"f=");
     3a6:	87 e8       	ldi	r24, 0x87	; 135
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayNumber(copy_u32Frequency);
     3ae:	69 81       	ldd	r22, Y+1	; 0x01
     3b0:	7a 81       	ldd	r23, Y+2	; 0x02
     3b2:	8b 81       	ldd	r24, Y+3	; 0x03
     3b4:	9c 81       	ldd	r25, Y+4	; 0x04
     3b6:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_voidDisplayNumber>
LCD_voidDisplayString((u8*)"Hz ");
     3ba:	84 e6       	ldi	r24, 0x64	; 100
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayString((u8*)"DUTY_Cycle=");
     3c2:	88 e6       	ldi	r24, 0x68	; 104
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayNumber(copy_u32PeriodicTime);
     3ca:	c3 01       	movw	r24, r6
     3cc:	b2 01       	movw	r22, r4
     3ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_voidDisplayNumber>
LCD_voidDisplayString((u8*)"ms ");
     3d2:	84 e7       	ldi	r24, 0x74	; 116
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayString((u8*)"Duty= ");
     3da:	88 e7       	ldi	r24, 0x78	; 120
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayNumber(copy_u32DutyCycle);
     3e2:	6d 81       	ldd	r22, Y+5	; 0x05
     3e4:	7e 81       	ldd	r23, Y+6	; 0x06
     3e6:	8f 81       	ldd	r24, Y+7	; 0x07
     3e8:	98 85       	ldd	r25, Y+8	; 0x08
     3ea:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_voidDisplayNumber>
LCD_voidDisplayChar(37);
     3ee:	85 e2       	ldi	r24, 0x25	; 37
     3f0:	0e 94 19 01 	call	0x232	; 0x232 <LCD_voidDisplayChar>
LCD_voidGoToSpecificPosition(2,0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
LCD_voidDisplayString((u8*)"Ton=");
     3fc:	8f e7       	ldi	r24, 0x7F	; 127
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayNumber(cop_u32Ton);
     404:	c6 01       	movw	r24, r12
     406:	b5 01       	movw	r22, r10
     408:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_voidDisplayNumber>
LCD_voidDisplayString((u8*)"ms ");
     40c:	84 e7       	ldi	r24, 0x74	; 116
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayString((u8*)"Toff=");
     414:	84 e8       	ldi	r24, 0x84	; 132
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
LCD_voidDisplayNumber(copu_u32Toff);
     41c:	69 8d       	ldd	r22, Y+25	; 0x19
     41e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     420:	8b 8d       	ldd	r24, Y+27	; 0x1b
     422:	9c 8d       	ldd	r25, Y+28	; 0x1c
     424:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_voidDisplayNumber>
LCD_voidDisplayString((u8*)"ms ");
     428:	84 e7       	ldi	r24, 0x74	; 116
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
}
     430:	28 96       	adiw	r28, 0x08	; 8
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	08 95       	ret

0000045a <LCD_voidDisplayPWMSignal>:
		LCD_voidDisplayChar('_');
	}
	*/
	
	
	if(copy_u32Frequency < 50)
     45a:	22 33       	cpi	r18, 0x32	; 50
     45c:	31 05       	cpc	r19, r1
     45e:	41 05       	cpc	r20, r1
     460:	51 05       	cpc	r21, r1
     462:	08 f0       	brcs	.+2      	; 0x466 <LCD_voidDisplayPWMSignal+0xc>
     464:	82 c0       	rjmp	.+260    	; 0x56a <LCD_voidDisplayPWMSignal+0x110>
	{
		
	if(copy_u32DutyCycle <15)
     466:	6f 30       	cpi	r22, 0x0F	; 15
     468:	71 05       	cpc	r23, r1
     46a:	81 05       	cpc	r24, r1
     46c:	91 05       	cpc	r25, r1
     46e:	b0 f4       	brcc	.+44     	; 0x49c <LCD_voidDisplayPWMSignal+0x42>
	{
		LCD_voidDisplayString((u8*)"|-|_|-|_|-|_|-|_|-|_");
     470:	8b e8       	ldi	r24, 0x8B	; 139
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
		LCD_voidGoToSpecificPosition(2,18);
     478:	62 e1       	ldi	r22, 0x12	; 18
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	87 e8       	ldi	r24, 0x87	; 135
     484:	93 e1       	ldi	r25, 0x13	; 19
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <LCD_voidDisplayPWMSignal+0x2c>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_voidDisplayPWMSignal+0x36>
     490:	00 00       	nop
		_delay_ms(400);
		LCD_voidDisplayString((u8*)"_|-|_|-|_|-|_|-|_|-|_");
     492:	8a e8       	ldi	r24, 0x8A	; 138
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     49a:	08 95       	ret
	}
	else if(copy_u32DutyCycle <25)
     49c:	69 31       	cpi	r22, 0x19	; 25
     49e:	71 05       	cpc	r23, r1
     4a0:	81 05       	cpc	r24, r1
     4a2:	91 05       	cpc	r25, r1
     4a4:	b0 f4       	brcc	.+44     	; 0x4d2 <LCD_voidDisplayPWMSignal+0x78>
	{
		LCD_voidDisplayString((u8*)"--|__|--|__");
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     4ae:	2f ef       	ldi	r18, 0xFF	; 255
     4b0:	87 e8       	ldi	r24, 0x87	; 135
     4b2:	93 e1       	ldi	r25, 0x13	; 19
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	80 40       	sbci	r24, 0x00	; 0
     4b8:	90 40       	sbci	r25, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <LCD_voidDisplayPWMSignal+0x5a>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_voidDisplayPWMSignal+0x64>
     4be:	00 00       	nop
		_delay_ms(400);
		LCD_voidGoToSpecificPosition(2,18);
     4c0:	62 e1       	ldi	r22, 0x12	; 18
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*)"__|--|__|--|__|");
     4c8:	8c ea       	ldi	r24, 0xAC	; 172
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     4d0:	08 95       	ret
		
	}
	else if(copy_u32DutyCycle <50)
     4d2:	62 33       	cpi	r22, 0x32	; 50
     4d4:	71 05       	cpc	r23, r1
     4d6:	81 05       	cpc	r24, r1
     4d8:	91 05       	cpc	r25, r1
     4da:	b0 f4       	brcc	.+44     	; 0x508 <LCD_voidDisplayPWMSignal+0xae>
	{
		LCD_voidDisplayString((u8*)"---|___");
     4dc:	8c eb       	ldi	r24, 0xBC	; 188
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     4e4:	2f ef       	ldi	r18, 0xFF	; 255
     4e6:	89 e6       	ldi	r24, 0x69	; 105
     4e8:	98 e1       	ldi	r25, 0x18	; 24
     4ea:	21 50       	subi	r18, 0x01	; 1
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	90 40       	sbci	r25, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <LCD_voidDisplayPWMSignal+0x90>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCD_voidDisplayPWMSignal+0x9a>
     4f4:	00 00       	nop
		_delay_ms(500);
		LCD_voidGoToSpecificPosition(2,18);
     4f6:	62 e1       	ldi	r22, 0x12	; 18
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*)"___|---|___|");
     4fe:	84 ec       	ldi	r24, 0xC4	; 196
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     506:	08 95       	ret
	}
	else if(copy_u32DutyCycle <75)
     508:	6b 34       	cpi	r22, 0x4B	; 75
     50a:	71 05       	cpc	r23, r1
     50c:	81 05       	cpc	r24, r1
     50e:	91 05       	cpc	r25, r1
     510:	b0 f4       	brcc	.+44     	; 0x53e <LCD_voidDisplayPWMSignal+0xe4>
	{
		LCD_voidDisplayString((u8*)"----|____");
     512:	81 ed       	ldi	r24, 0xD1	; 209
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	87 e8       	ldi	r24, 0x87	; 135
     51e:	93 e1       	ldi	r25, 0x13	; 19
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <LCD_voidDisplayPWMSignal+0xc6>
     528:	00 c0       	rjmp	.+0      	; 0x52a <LCD_voidDisplayPWMSignal+0xd0>
     52a:	00 00       	nop
		_delay_ms(400);
		LCD_voidGoToSpecificPosition(2,18);
     52c:	62 e1       	ldi	r22, 0x12	; 18
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*)"____|----|____|");
     534:	8b ed       	ldi	r24, 0xDB	; 219
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     53c:	08 95       	ret
	}
	else
	{
		LCD_voidDisplayString((u8*)"|-----|_____");
     53e:	80 ef       	ldi	r24, 0xF0	; 240
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	87 e8       	ldi	r24, 0x87	; 135
     54a:	93 e1       	ldi	r25, 0x13	; 19
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <LCD_voidDisplayPWMSignal+0xf2>
     554:	00 c0       	rjmp	.+0      	; 0x556 <LCD_voidDisplayPWMSignal+0xfc>
     556:	00 00       	nop
		_delay_ms(400);
		LCD_voidGoToSpecificPosition(2,18);
     558:	62 e1       	ldi	r22, 0x12	; 18
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
		LCD_voidDisplayString((u8*)"_____|-----|_____");
     560:	8b ee       	ldi	r24, 0xEB	; 235
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     568:	08 95       	ret
	}
	}
	else
	{
			if(copy_u32DutyCycle <15)
     56a:	6f 30       	cpi	r22, 0x0F	; 15
     56c:	71 05       	cpc	r23, r1
     56e:	81 05       	cpc	r24, r1
     570:	91 05       	cpc	r25, r1
     572:	68 f4       	brcc	.+26     	; 0x58e <LCD_voidDisplayPWMSignal+0x134>
			{
				LCD_voidDisplayString((u8*)"|-|_|-|_|-|_|");
     574:	8e ef       	ldi	r24, 0xFE	; 254
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(2,19);
     57c:	63 e1       	ldi	r22, 0x13	; 19
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*)"_|-|_|-|_|-|_|");
     584:	8d ef       	ldi	r24, 0xFD	; 253
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     58c:	08 95       	ret
			}
			else if(copy_u32DutyCycle <25)
     58e:	69 31       	cpi	r22, 0x19	; 25
     590:	71 05       	cpc	r23, r1
     592:	81 05       	cpc	r24, r1
     594:	91 05       	cpc	r25, r1
     596:	68 f4       	brcc	.+26     	; 0x5b2 <LCD_voidDisplayPWMSignal+0x158>
			{
				LCD_voidDisplayString((u8*)"|--|__|--|__|");
     598:	8e ea       	ldi	r24, 0xAE	; 174
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(2,18);
     5a0:	62 e1       	ldi	r22, 0x12	; 18
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*)"__|--|__|--|__|");
     5a8:	8c ea       	ldi	r24, 0xAC	; 172
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     5b0:	08 95       	ret
				
			}
			else if(copy_u32DutyCycle <50)
     5b2:	62 33       	cpi	r22, 0x32	; 50
     5b4:	71 05       	cpc	r23, r1
     5b6:	81 05       	cpc	r24, r1
     5b8:	91 05       	cpc	r25, r1
     5ba:	68 f4       	brcc	.+26     	; 0x5d6 <LCD_voidDisplayPWMSignal+0x17c>
			{
				LCD_voidDisplayString((u8*)"---|___");
     5bc:	8c eb       	ldi	r24, 0xBC	; 188
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(2,18);
     5c4:	62 e1       	ldi	r22, 0x12	; 18
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*)"___|---|___|");
     5cc:	84 ec       	ldi	r24, 0xC4	; 196
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     5d4:	08 95       	ret
			}
			else if(copy_u32DutyCycle <75)
     5d6:	6b 34       	cpi	r22, 0x4B	; 75
     5d8:	71 05       	cpc	r23, r1
     5da:	81 05       	cpc	r24, r1
     5dc:	91 05       	cpc	r25, r1
     5de:	68 f4       	brcc	.+26     	; 0x5fa <LCD_voidDisplayPWMSignal+0x1a0>
			{
				LCD_voidDisplayString((u8*)"----|____");
     5e0:	81 ed       	ldi	r24, 0xD1	; 209
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(2,18);
     5e8:	62 e1       	ldi	r22, 0x12	; 18
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*)"____|----|____|");
     5f0:	8b ed       	ldi	r24, 0xDB	; 219
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     5f8:	08 95       	ret
			}
			else
			{
				LCD_voidDisplayString((u8*)"|-----|_____");
     5fa:	80 ef       	ldi	r24, 0xF0	; 240
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
				LCD_voidGoToSpecificPosition(2,18);
     602:	62 e1       	ldi	r22, 0x12	; 18
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
				LCD_voidDisplayString((u8*)"_____|-----|______");
     60a:	8c e0       	ldi	r24, 0x0C	; 12
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     612:	08 95       	ret

00000614 <SWITCH_voidInit>:
 #include "SWITCH_interface.h"
 
 
void SWITCH_voidInit(u8 copy_u8SwitchPortId, u8 copy_u8SwitchPinId)
{
	DIO_voidSetPinDirection(copy_u8SwitchPortId,copy_u8SwitchPinId,DIO_PIN_INPUT);
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
     61a:	08 95       	ret

0000061c <SWITCH_voidGetState>:
}


void SWITCH_voidGetState(u8 copy_u8SwitchPortId, u8 copy_u8SwitchPinId, u8 copy_u8SwitchConnectionType, u8* copy_pu8SwitchState)
{
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
	if(copy_pu8SwitchState!=NULL)
     62c:	21 15       	cp	r18, r1
     62e:	31 05       	cpc	r19, r1
     630:	01 f1       	breq	.+64     	; 0x672 <SWITCH_voidGetState+0x56>
     632:	79 01       	movw	r14, r18
     634:	14 2f       	mov	r17, r20
	{
		u8 local_u8PinValue;
		DIO_voidGetPinValue(copy_u8SwitchPortId,copy_u8SwitchPinId,&local_u8PinValue);
     636:	ae 01       	movw	r20, r28
     638:	4f 5f       	subi	r20, 0xFF	; 255
     63a:	5f 4f       	sbci	r21, 0xFF	; 255
     63c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <DIO_voidGetPinValue>
		switch(copy_u8SwitchConnectionType)
     640:	11 30       	cpi	r17, 0x01	; 1
     642:	19 f0       	breq	.+6      	; 0x64a <SWITCH_voidGetState+0x2e>
     644:	12 30       	cpi	r17, 0x02	; 2
     646:	59 f0       	breq	.+22     	; 0x65e <SWITCH_voidGetState+0x42>
     648:	14 c0       	rjmp	.+40     	; 0x672 <SWITCH_voidGetState+0x56>
		{
			case SWITCH_FORWARD_CONNECTION:
			if(1 == local_u8PinValue)
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	19 f4       	brne	.+6      	; 0x656 <SWITCH_voidGetState+0x3a>
			{
				*copy_pu8SwitchState = SWITCH_PRESSED;
     650:	f7 01       	movw	r30, r14
     652:	80 83       	st	Z, r24
     654:	0e c0       	rjmp	.+28     	; 0x672 <SWITCH_voidGetState+0x56>
			}
			else
			{
				*copy_pu8SwitchState = SWITCH_NOT_PRESSED;
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	f7 01       	movw	r30, r14
     65a:	80 83       	st	Z, r24
     65c:	0a c0       	rjmp	.+20     	; 0x672 <SWITCH_voidGetState+0x56>
			}
			break;
			
			case SWITCH_REVERSE_CONNECTION:
			if(0 == local_u8PinValue)
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	81 11       	cpse	r24, r1
     662:	04 c0       	rjmp	.+8      	; 0x66c <SWITCH_voidGetState+0x50>
			{
				*copy_pu8SwitchState = SWITCH_PRESSED;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	f7 01       	movw	r30, r14
     668:	80 83       	st	Z, r24
     66a:	03 c0       	rjmp	.+6      	; 0x672 <SWITCH_voidGetState+0x56>
			}
			else
			{
				*copy_pu8SwitchState = SWITCH_NOT_PRESSED;
     66c:	82 e0       	ldi	r24, 0x02	; 2
     66e:	f7 01       	movw	r30, r14
     670:	80 83       	st	Z, r24
	}
	else
	{
		//return Error State
	}
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <main>:



 u32 Global_ovfCounter,Global_state,Global_onTicks,Global_onCounter,Global_totalTicks,Global_totalCounter;
int main(void)
{
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	cd b7       	in	r28, 0x3d	; 61
     686:	de b7       	in	r29, 0x3e	; 62
     688:	68 97       	sbiw	r28, 0x18	; 24
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
	 u32 local_u32DutyCycle,local_u32Frequency,local_u32PeriodicTime,local_Ton,local_Toff;
	 u8 local_u8Switchstate1,local_u8Switchstate2,local_u8Switchstate3,local_u8Switchstate4; 
	 u8 local_firstIteration = 1 ;
	 
	GI_voidEnable();
     694:	0e 94 1a 07 	call	0xe34	; 0xe34 <GI_voidEnable>
	LCD_voidInit();
     698:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_voidInit>
	TMR0_voidInit();
     69c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TMR0_voidInit>
	PWM_voidInitChannel_1A();
     6a0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <PWM_voidInitChannel_1A>
	
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
     6a4:	41 e0       	ldi	r20, 0x01	; 1
     6a6:	65 e0       	ldi	r22, 0x05	; 5
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	62 e0       	ldi	r22, 0x02	; 2
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DIO_voidSetPinDirection>

	SWITCH_voidInit(DIO_PORTC,DIO_PIN0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 0a 03 	call	0x614	; 0x614 <SWITCH_voidInit>
	SWITCH_voidInit(DIO_PORTC,DIO_PIN1);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 0a 03 	call	0x614	; 0x614 <SWITCH_voidInit>
	SWITCH_voidInit(DIO_PORTC,DIO_PIN2);
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 0a 03 	call	0x614	; 0x614 <SWITCH_voidInit>
	SWITCH_voidInit(DIO_PORTC,DIO_PIN3);
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 0a 03 	call	0x614	; 0x614 <SWITCH_voidInit>
	
	LCD_voidDisplayString((u8*)"Welcome to Yousef's Project");
     6d8:	8f e1       	ldi	r24, 0x1F	; 31
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	83 ed       	ldi	r24, 0xD3	; 211
     6e4:	90 e3       	ldi	r25, 0x30	; 48
     6e6:	21 50       	subi	r18, 0x01	; 1
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x66>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <main+0x70>
     6f0:	00 00       	nop
	_delay_ms(1000);
	LCD_voidGoToSpecificPosition(2,0);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 93 01 	call	0x326	; 0x326 <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*)"PWM_reader Amit 2024 :)");
     6fa:	8b e3       	ldi	r24, 0x3B	; 59
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_voidDisplayString>
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	8d e3       	ldi	r24, 0x3D	; 61
     706:	99 e4       	ldi	r25, 0x49	; 73
     708:	21 50       	subi	r18, 0x01	; 1
     70a:	80 40       	sbci	r24, 0x00	; 0
     70c:	90 40       	sbci	r25, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x88>
     710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x92>
     712:	00 00       	nop
	_delay_ms(1500);
	
	
	EXTI_voidInit(EXTI_INT0,EXTI_RISING_EDGE);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 b6 06 	call	0xd6c	; 0xd6c <EXTI_voidInit>
	TMR0_voidStart();
     71c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <TMR0_voidStart>
 u32 Global_ovfCounter,Global_state,Global_onTicks,Global_onCounter,Global_totalTicks,Global_totalCounter;
int main(void)
{
	 u32 local_u32DutyCycle,local_u32Frequency,local_u32PeriodicTime,local_Ton,local_Toff;
	 u8 local_u8Switchstate1,local_u8Switchstate2,local_u8Switchstate3,local_u8Switchstate4; 
	 u8 local_firstIteration = 1 ;
     720:	81 e0       	ldi	r24, 0x01	; 1
					local_firstIteration = 0;
				}
				else
				{
				LCD_voidDisplayPWMCalculations(local_u32Frequency,local_u32PeriodicTime,local_u32DutyCycle,local_Ton,local_Toff);
				LCD_voidDisplayPWMSignal(local_u32DutyCycle,local_u32Frequency,local_Ton,local_Toff);
     722:	78 2e       	mov	r7, r24
	EXTI_voidInit(EXTI_INT0,EXTI_RISING_EDGE);
	TMR0_voidStart();
	while (1)
	{
		
		SWITCH_voidGetState(DIO_PORTC, DIO_PIN0, SWITCH_FORWARD_CONNECTION, &local_u8Switchstate1);
     724:	9e 01       	movw	r18, r28
     726:	2b 5e       	subi	r18, 0xEB	; 235
     728:	3f 4f       	sbci	r19, 0xFF	; 255
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 0e 03 	call	0x61c	; 0x61c <SWITCH_voidGetState>
		SWITCH_voidGetState(DIO_PORTC, DIO_PIN1, SWITCH_FORWARD_CONNECTION, &local_u8Switchstate2);
     734:	9e 01       	movw	r18, r28
     736:	2a 5e       	subi	r18, 0xEA	; 234
     738:	3f 4f       	sbci	r19, 0xFF	; 255
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	0e 94 0e 03 	call	0x61c	; 0x61c <SWITCH_voidGetState>
		SWITCH_voidGetState(DIO_PORTC, DIO_PIN2, SWITCH_FORWARD_CONNECTION, &local_u8Switchstate3);
     744:	9e 01       	movw	r18, r28
     746:	29 5e       	subi	r18, 0xE9	; 233
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	62 e0       	ldi	r22, 0x02	; 2
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 0e 03 	call	0x61c	; 0x61c <SWITCH_voidGetState>
		SWITCH_voidGetState(DIO_PORTC, DIO_PIN3, SWITCH_FORWARD_CONNECTION, &local_u8Switchstate4);
     754:	9e 01       	movw	r18, r28
     756:	28 5e       	subi	r18, 0xE8	; 232
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	63 e0       	ldi	r22, 0x03	; 3
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	0e 94 0e 03 	call	0x61c	; 0x61c <SWITCH_voidGetState>
	if (local_u8Switchstate1 == SWITCH_PRESSED)
     764:	8d 89       	ldd	r24, Y+21	; 0x15
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	41 f4       	brne	.+16     	; 0x77a <main+0xfa>
	{
		PWM_voidGenerate_PWM_Channel_1A(25, 75); // Low Frequency High Duty
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	66 e9       	ldi	r22, 0x96	; 150
     770:	72 e4       	ldi	r23, 0x42	; 66
     772:	89 e1       	ldi	r24, 0x19	; 25
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 31 07 	call	0xe62	; 0xe62 <PWM_voidGenerate_PWM_Channel_1A>
	}
	if (local_u8Switchstate2 == SWITCH_PRESSED)
     77a:	8e 89       	ldd	r24, Y+22	; 0x16
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	41 f4       	brne	.+16     	; 0x790 <main+0x110>
	{
		PWM_voidGenerate_PWM_Channel_1A(50, 15); // High Frequency low Duty
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	60 e7       	ldi	r22, 0x70	; 112
     786:	71 e4       	ldi	r23, 0x41	; 65
     788:	82 e3       	ldi	r24, 0x32	; 50
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 31 07 	call	0xe62	; 0xe62 <PWM_voidGenerate_PWM_Channel_1A>
	}
	if (local_u8Switchstate3 == SWITCH_PRESSED)
     790:	8f 89       	ldd	r24, Y+23	; 0x17
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	41 f4       	brne	.+16     	; 0x7a6 <main+0x126>
	{
		PWM_voidGenerate_PWM_Channel_1A(50, 85); // High Frequency High Duty
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	6a ea       	ldi	r22, 0xAA	; 170
     79c:	72 e4       	ldi	r23, 0x42	; 66
     79e:	82 e3       	ldi	r24, 0x32	; 50
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 31 07 	call	0xe62	; 0xe62 <PWM_voidGenerate_PWM_Channel_1A>
	}
	if (local_u8Switchstate4 == SWITCH_PRESSED)
     7a6:	88 8d       	ldd	r24, Y+24	; 0x18
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	41 f4       	brne	.+16     	; 0x7bc <main+0x13c>
	{
		PWM_voidGenerate_PWM_Channel_1A(165, 95);// Very High Frequency Very High Duty
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	6e eb       	ldi	r22, 0xBE	; 190
     7b2:	72 e4       	ldi	r23, 0x42	; 66
     7b4:	85 ea       	ldi	r24, 0xA5	; 165
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 31 07 	call	0xe62	; 0xe62 <PWM_voidGenerate_PWM_Channel_1A>
	}
	if(local_u8Switchstate1 != SWITCH_PRESSED && local_u8Switchstate2 != SWITCH_PRESSED && local_u8Switchstate3 != SWITCH_PRESSED && local_u8Switchstate4 != SWITCH_PRESSED)
     7bc:	8d 89       	ldd	r24, Y+21	; 0x15
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	89 f0       	breq	.+34     	; 0x7e4 <main+0x164>
     7c2:	8e 89       	ldd	r24, Y+22	; 0x16
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	71 f0       	breq	.+28     	; 0x7e4 <main+0x164>
     7c8:	8f 89       	ldd	r24, Y+23	; 0x17
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	59 f0       	breq	.+22     	; 0x7e4 <main+0x164>
     7ce:	88 8d       	ldd	r24, Y+24	; 0x18
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	41 f0       	breq	.+16     	; 0x7e4 <main+0x164>
	{
		PWM_voidGenerate_PWM_Channel_1A(25, 10); // Default Low Frequency Low Duty
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	60 e2       	ldi	r22, 0x20	; 32
     7da:	71 e4       	ldi	r23, 0x41	; 65
     7dc:	89 e1       	ldi	r24, 0x19	; 25
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 31 07 	call	0xe62	; 0xe62 <PWM_voidGenerate_PWM_Channel_1A>
	}



			if(Global_state == 3)
     7e4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Global_state>
     7e8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Global_state+0x1>
     7ec:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <Global_state+0x2>
     7f0:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <Global_state+0x3>
     7f4:	03 97       	sbiw	r24, 0x03	; 3
     7f6:	a1 05       	cpc	r26, r1
     7f8:	b1 05       	cpc	r27, r1
     7fa:	09 f0       	breq	.+2      	; 0x7fe <main+0x17e>
     7fc:	93 cf       	rjmp	.-218    	; 0x724 <main+0xa4>
			{ 
					EXTI_voidInit(EXTI_INT0,EXTI_RISING_EDGE);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 b6 06 	call	0xd6c	; 0xd6c <EXTI_voidInit>
					Global_state=0;
     806:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Global_state>
     80a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Global_state+0x1>
     80e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Global_state+0x2>
     812:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <Global_state+0x3>
					Global_ovfCounter=0;
     816:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <Global_ovfCounter>
     81a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <Global_ovfCounter+0x1>
     81e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <Global_ovfCounter+0x2>
     822:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <Global_ovfCounter+0x3>
					
					PWM_voidDutyCycleCalculations(&local_u32DutyCycle,Global_onTicks,Global_onCounter,Global_totalTicks,Global_totalCounter);
     826:	80 90 68 01 	lds	r8, 0x0168	; 0x800168 <Global_totalCounter>
     82a:	90 90 69 01 	lds	r9, 0x0169	; 0x800169 <Global_totalCounter+0x1>
     82e:	a0 90 6a 01 	lds	r10, 0x016A	; 0x80016a <Global_totalCounter+0x2>
     832:	b0 90 6b 01 	lds	r11, 0x016B	; 0x80016b <Global_totalCounter+0x3>
     836:	c0 90 54 01 	lds	r12, 0x0154	; 0x800154 <__data_end>
     83a:	d0 90 55 01 	lds	r13, 0x0155	; 0x800155 <__data_end+0x1>
     83e:	e0 90 56 01 	lds	r14, 0x0156	; 0x800156 <__data_end+0x2>
     842:	f0 90 57 01 	lds	r15, 0x0157	; 0x800157 <__data_end+0x3>
     846:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <Global_onCounter>
     84a:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <Global_onCounter+0x1>
     84e:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <Global_onCounter+0x2>
     852:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <Global_onCounter+0x3>
     856:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <Global_onTicks>
     85a:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <Global_onTicks+0x1>
     85e:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <Global_onTicks+0x2>
     862:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <Global_onTicks+0x3>
     866:	ce 01       	movw	r24, r28
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	0e 94 7d 07 	call	0xefa	; 0xefa <PWM_voidDutyCycleCalculations>
					PWM_voidFrequencyCalculation(&local_u32Frequency,Global_totalTicks,Global_totalCounter);
     86e:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <Global_totalCounter>
     872:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <Global_totalCounter+0x1>
     876:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <Global_totalCounter+0x2>
     87a:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <Global_totalCounter+0x3>
     87e:	40 91 54 01 	lds	r20, 0x0154	; 0x800154 <__data_end>
     882:	50 91 55 01 	lds	r21, 0x0155	; 0x800155 <__data_end+0x1>
     886:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <__data_end+0x2>
     88a:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <__data_end+0x3>
     88e:	ce 01       	movw	r24, r28
     890:	05 96       	adiw	r24, 0x05	; 5
     892:	0e 94 c1 07 	call	0xf82	; 0xf82 <PWM_voidFrequencyCalculation>
					PWM_voidPeriodicTimeCalculations(local_u32Frequency,&local_u32PeriodicTime);
     896:	6d 81       	ldd	r22, Y+5	; 0x05
     898:	7e 81       	ldd	r23, Y+6	; 0x06
     89a:	8f 81       	ldd	r24, Y+7	; 0x07
     89c:	98 85       	ldd	r25, Y+8	; 0x08
     89e:	ae 01       	movw	r20, r28
     8a0:	47 5f       	subi	r20, 0xF7	; 247
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <PWM_voidPeriodicTimeCalculations>
					PWM_voidOnTimeDuration(local_u32PeriodicTime,local_u32DutyCycle,&local_Ton);
     8a8:	29 81       	ldd	r18, Y+1	; 0x01
     8aa:	3a 81       	ldd	r19, Y+2	; 0x02
     8ac:	4b 81       	ldd	r20, Y+3	; 0x03
     8ae:	5c 81       	ldd	r21, Y+4	; 0x04
     8b0:	69 85       	ldd	r22, Y+9	; 0x09
     8b2:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b8:	8e 01       	movw	r16, r28
     8ba:	03 5f       	subi	r16, 0xF3	; 243
     8bc:	1f 4f       	sbci	r17, 0xFF	; 255
     8be:	0e 94 03 08 	call	0x1006	; 0x1006 <PWM_voidOnTimeDuration>
					PWM_voidOffTimeDuration(local_u32PeriodicTime,local_Ton,&local_Toff);
     8c2:	2d 85       	ldd	r18, Y+13	; 0x0d
     8c4:	3e 85       	ldd	r19, Y+14	; 0x0e
     8c6:	4f 85       	ldd	r20, Y+15	; 0x0f
     8c8:	58 89       	ldd	r21, Y+16	; 0x10
     8ca:	69 85       	ldd	r22, Y+9	; 0x09
     8cc:	7a 85       	ldd	r23, Y+10	; 0x0a
     8ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d2:	0c 5f       	subi	r16, 0xFC	; 252
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	0e 94 3e 08 	call	0x107c	; 0x107c <PWM_voidOffTimeDuration>
				if(local_firstIteration)
				{
					local_firstIteration = 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
					PWM_voidDutyCycleCalculations(&local_u32DutyCycle,Global_onTicks,Global_onCounter,Global_totalTicks,Global_totalCounter);
					PWM_voidFrequencyCalculation(&local_u32Frequency,Global_totalTicks,Global_totalCounter);
					PWM_voidPeriodicTimeCalculations(local_u32Frequency,&local_u32PeriodicTime);
					PWM_voidOnTimeDuration(local_u32PeriodicTime,local_u32DutyCycle,&local_Ton);
					PWM_voidOffTimeDuration(local_u32PeriodicTime,local_Ton,&local_Toff);
				if(local_firstIteration)
     8dc:	71 10       	cpse	r7, r1
     8de:	21 cf       	rjmp	.-446    	; 0x722 <main+0xa2>
				{
					local_firstIteration = 0;
				}
				else
				{
				LCD_voidDisplayPWMCalculations(local_u32Frequency,local_u32PeriodicTime,local_u32DutyCycle,local_Ton,local_Toff);
     8e0:	ad 84       	ldd	r10, Y+13	; 0x0d
     8e2:	be 84       	ldd	r11, Y+14	; 0x0e
     8e4:	cf 84       	ldd	r12, Y+15	; 0x0f
     8e6:	d8 88       	ldd	r13, Y+16	; 0x10
     8e8:	e9 80       	ldd	r14, Y+1	; 0x01
     8ea:	fa 80       	ldd	r15, Y+2	; 0x02
     8ec:	0b 81       	ldd	r16, Y+3	; 0x03
     8ee:	1c 81       	ldd	r17, Y+4	; 0x04
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	6d 81       	ldd	r22, Y+5	; 0x05
     8fa:	7e 81       	ldd	r23, Y+6	; 0x06
     8fc:	8f 81       	ldd	r24, Y+7	; 0x07
     8fe:	98 85       	ldd	r25, Y+8	; 0x08
     900:	ec 89       	ldd	r30, Y+20	; 0x14
     902:	ef 93       	push	r30
     904:	eb 89       	ldd	r30, Y+19	; 0x13
     906:	ef 93       	push	r30
     908:	ea 89       	ldd	r30, Y+18	; 0x12
     90a:	ef 93       	push	r30
     90c:	e9 89       	ldd	r30, Y+17	; 0x11
     90e:	ef 93       	push	r30
     910:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_voidDisplayPWMCalculations>
				LCD_voidDisplayPWMSignal(local_u32DutyCycle,local_u32Frequency,local_Ton,local_Toff);
     914:	a9 88       	ldd	r10, Y+17	; 0x11
     916:	ba 88       	ldd	r11, Y+18	; 0x12
     918:	cb 88       	ldd	r12, Y+19	; 0x13
     91a:	dc 88       	ldd	r13, Y+20	; 0x14
     91c:	ed 84       	ldd	r14, Y+13	; 0x0d
     91e:	fe 84       	ldd	r15, Y+14	; 0x0e
     920:	0f 85       	ldd	r16, Y+15	; 0x0f
     922:	18 89       	ldd	r17, Y+16	; 0x10
     924:	2d 81       	ldd	r18, Y+5	; 0x05
     926:	3e 81       	ldd	r19, Y+6	; 0x06
     928:	4f 81       	ldd	r20, Y+7	; 0x07
     92a:	58 85       	ldd	r21, Y+8	; 0x08
     92c:	69 81       	ldd	r22, Y+1	; 0x01
     92e:	7a 81       	ldd	r23, Y+2	; 0x02
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	9c 81       	ldd	r25, Y+4	; 0x04
     934:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_voidDisplayPWMSignal>
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	87 2d       	mov	r24, r7
     942:	ef ce       	rjmp	.-546    	; 0x722 <main+0xa2>

00000944 <__vector_11>:
		}
	}

void __vector_11(void) __attribute__ ((signal));
void __vector_11(void)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
	Global_ovfCounter++;
     956:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <Global_ovfCounter>
     95a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <Global_ovfCounter+0x1>
     95e:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <Global_ovfCounter+0x2>
     962:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <Global_ovfCounter+0x3>
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	a1 1d       	adc	r26, r1
     96a:	b1 1d       	adc	r27, r1
     96c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <Global_ovfCounter>
     970:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <Global_ovfCounter+0x1>
     974:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <Global_ovfCounter+0x2>
     978:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <Global_ovfCounter+0x3>
}
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	0f 90       	pop	r0
     98a:	1f 90       	pop	r1
     98c:	18 95       	reti

0000098e <__vector_1>:
void __vector_1(void) __attribute__ ((signal));
void __vector_1(void)
{
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	2f 93       	push	r18
     99a:	3f 93       	push	r19
     99c:	4f 93       	push	r20
     99e:	5f 93       	push	r21
     9a0:	6f 93       	push	r22
     9a2:	7f 93       	push	r23
     9a4:	8f 93       	push	r24
     9a6:	9f 93       	push	r25
     9a8:	af 93       	push	r26
     9aa:	bf 93       	push	r27
     9ac:	ef 93       	push	r30
     9ae:	ff 93       	push	r31
	if(Global_state == 0)
     9b0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Global_state>
     9b4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Global_state+0x1>
     9b8:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <Global_state+0x2>
     9bc:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <Global_state+0x3>
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	a1 05       	cpc	r26, r1
     9c4:	b1 05       	cpc	r27, r1
     9c6:	09 f5       	brne	.+66     	; 0xa0a <__vector_1+0x7c>
	{ 
		TCNT0_REG = 0;
     9c8:	12 be       	out	0x32, r1	; 50
		Global_ovfCounter = 0;
     9ca:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <Global_ovfCounter>
     9ce:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <Global_ovfCounter+0x1>
     9d2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <Global_ovfCounter+0x2>
     9d6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <Global_ovfCounter+0x3>
		EXTI_voidInit(EXTI_INT0,EXTI_FALLING_EDGE);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 b6 06 	call	0xd6c	; 0xd6c <EXTI_voidInit>
		Global_state++;
     9e2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Global_state>
     9e6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Global_state+0x1>
     9ea:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <Global_state+0x2>
     9ee:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <Global_state+0x3>
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	a1 1d       	adc	r26, r1
     9f6:	b1 1d       	adc	r27, r1
     9f8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Global_state>
     9fc:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Global_state+0x1>
     a00:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <Global_state+0x2>
     a04:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <Global_state+0x3>
     a08:	65 c0       	rjmp	.+202    	; 0xad4 <__vector_1+0x146>
	}
	else if(Global_state == 1)
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	91 05       	cpc	r25, r1
     a0e:	a1 05       	cpc	r26, r1
     a10:	b1 05       	cpc	r27, r1
     a12:	a1 f5       	brne	.+104    	; 0xa7c <__vector_1+0xee>
	{
		Global_onTicks = TCNT0_REG;
     a14:	82 b7       	in	r24, 0x32	; 50
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <Global_onTicks>
     a20:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <Global_onTicks+0x1>
     a24:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <Global_onTicks+0x2>
     a28:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <Global_onTicks+0x3>
		Global_onCounter = Global_ovfCounter;
     a2c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <Global_ovfCounter>
     a30:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <Global_ovfCounter+0x1>
     a34:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <Global_ovfCounter+0x2>
     a38:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <Global_ovfCounter+0x3>
     a3c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <Global_onCounter>
     a40:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <Global_onCounter+0x1>
     a44:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <Global_onCounter+0x2>
     a48:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <Global_onCounter+0x3>
		EXTI_voidInit(EXTI_INT0,EXTI_RISING_EDGE);
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 b6 06 	call	0xd6c	; 0xd6c <EXTI_voidInit>
		Global_state++;
     a54:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Global_state>
     a58:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <Global_state+0x1>
     a5c:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <Global_state+0x2>
     a60:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <Global_state+0x3>
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	a1 1d       	adc	r26, r1
     a68:	b1 1d       	adc	r27, r1
     a6a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Global_state>
     a6e:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Global_state+0x1>
     a72:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <Global_state+0x2>
     a76:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <Global_state+0x3>
     a7a:	2c c0       	rjmp	.+88     	; 0xad4 <__vector_1+0x146>
	}
	else if(Global_state == 2)
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	91 05       	cpc	r25, r1
     a80:	a1 05       	cpc	r26, r1
     a82:	b1 05       	cpc	r27, r1
     a84:	39 f5       	brne	.+78     	; 0xad4 <__vector_1+0x146>
	{
		Global_totalTicks = TCNT0_REG;
     a86:	42 b7       	in	r20, 0x32	; 50
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <__data_end>
     a92:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <__data_end+0x1>
     a96:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <__data_end+0x2>
     a9a:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <__data_end+0x3>
		Global_totalCounter = Global_ovfCounter;
     a9e:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <Global_ovfCounter>
     aa2:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <Global_ovfCounter+0x1>
     aa6:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <Global_ovfCounter+0x2>
     aaa:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <Global_ovfCounter+0x3>
     aae:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <Global_totalCounter>
     ab2:	50 93 69 01 	sts	0x0169, r21	; 0x800169 <Global_totalCounter+0x1>
     ab6:	60 93 6a 01 	sts	0x016A, r22	; 0x80016a <Global_totalCounter+0x2>
     aba:	70 93 6b 01 	sts	0x016B, r23	; 0x80016b <Global_totalCounter+0x3>
	    Global_state++;
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	a1 1d       	adc	r26, r1
     ac2:	b1 1d       	adc	r27, r1
     ac4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Global_state>
     ac8:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <Global_state+0x1>
     acc:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <Global_state+0x2>
     ad0:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <Global_state+0x3>
	}
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <DIO_voidSetPinDirection>:


/* Pin Apis */
void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8)&&(copy_u8PinDirection<2))
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	08 f0       	brcs	.+2      	; 0xafc <DIO_voidSetPinDirection+0x6>
     afa:	7c c0       	rjmp	.+248    	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
     afc:	68 30       	cpi	r22, 0x08	; 8
     afe:	08 f0       	brcs	.+2      	; 0xb02 <DIO_voidSetPinDirection+0xc>
     b00:	79 c0       	rjmp	.+242    	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
     b02:	42 30       	cpi	r20, 0x02	; 2
     b04:	08 f0       	brcs	.+2      	; 0xb08 <DIO_voidSetPinDirection+0x12>
     b06:	76 c0       	rjmp	.+236    	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
	{
		switch(copy_u8PortId)
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	19 f1       	breq	.+70     	; 0xb52 <DIO_voidSetPinDirection+0x5c>
     b0c:	30 f0       	brcs	.+12     	; 0xb1a <DIO_voidSetPinDirection+0x24>
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	e1 f1       	breq	.+120    	; 0xb8a <DIO_voidSetPinDirection+0x94>
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	09 f4       	brne	.+2      	; 0xb18 <DIO_voidSetPinDirection+0x22>
     b16:	54 c0       	rjmp	.+168    	; 0xbc0 <DIO_voidSetPinDirection+0xca>
     b18:	08 95       	ret
	    {
		case DIO_PORTA:
		switch(copy_u8PinDirection)
     b1a:	44 23       	and	r20, r20
     b1c:	71 f0       	breq	.+28     	; 0xb3a <DIO_voidSetPinDirection+0x44>
     b1e:	41 30       	cpi	r20, 0x01	; 1
     b20:	09 f0       	breq	.+2      	; 0xb24 <DIO_voidSetPinDirection+0x2e>
     b22:	68 c0       	rjmp	.+208    	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
		{
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRA_REG,copy_u8PinId);
     b24:	2a b3       	in	r18, 0x1a	; 26
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_voidSetPinDirection+0x3a>
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	6a 95       	dec	r22
     b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_voidSetPinDirection+0x36>
     b34:	82 2b       	or	r24, r18
     b36:	8a bb       	out	0x1a, r24	; 26
			break;
     b38:	08 95       	ret
			
			case DIO_PIN_INPUT:
			CLR_BIT(DDRA_REG,copy_u8PinId);
     b3a:	2a b3       	in	r18, 0x1a	; 26
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_voidSetPinDirection+0x50>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	6a 95       	dec	r22
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_voidSetPinDirection+0x4c>
     b4a:	80 95       	com	r24
     b4c:	82 23       	and	r24, r18
     b4e:	8a bb       	out	0x1a, r24	; 26
			break;
     b50:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		switch(copy_u8PinDirection)
     b52:	44 23       	and	r20, r20
     b54:	71 f0       	breq	.+28     	; 0xb72 <DIO_voidSetPinDirection+0x7c>
     b56:	41 30       	cpi	r20, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <DIO_voidSetPinDirection+0x66>
     b5a:	4c c0       	rjmp	.+152    	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
		{
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRB_REG,copy_u8PinId);
     b5c:	27 b3       	in	r18, 0x17	; 23
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_voidSetPinDirection+0x72>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	6a 95       	dec	r22
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <DIO_voidSetPinDirection+0x6e>
     b6c:	82 2b       	or	r24, r18
     b6e:	87 bb       	out	0x17, r24	; 23
			break;
     b70:	08 95       	ret
			
			case DIO_PIN_INPUT:
			CLR_BIT(DDRB_REG,copy_u8PinId);
     b72:	27 b3       	in	r18, 0x17	; 23
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <DIO_voidSetPinDirection+0x88>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	6a 95       	dec	r22
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <DIO_voidSetPinDirection+0x84>
     b82:	80 95       	com	r24
     b84:	82 23       	and	r24, r18
     b86:	87 bb       	out	0x17, r24	; 23
			break;
     b88:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		switch(copy_u8PinDirection)
     b8a:	44 23       	and	r20, r20
     b8c:	69 f0       	breq	.+26     	; 0xba8 <DIO_voidSetPinDirection+0xb2>
     b8e:	41 30       	cpi	r20, 0x01	; 1
     b90:	89 f5       	brne	.+98     	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
		{
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRC_REG,copy_u8PinId);
     b92:	24 b3       	in	r18, 0x14	; 20
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <DIO_voidSetPinDirection+0xa8>
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	6a 95       	dec	r22
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <DIO_voidSetPinDirection+0xa4>
     ba2:	82 2b       	or	r24, r18
     ba4:	84 bb       	out	0x14, r24	; 20
			break;
     ba6:	08 95       	ret
			
			case DIO_PIN_INPUT:
			CLR_BIT(DDRC_REG,copy_u8PinId);
     ba8:	24 b3       	in	r18, 0x14	; 20
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_voidSetPinDirection+0xbe>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	6a 95       	dec	r22
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_voidSetPinDirection+0xba>
     bb8:	80 95       	com	r24
     bba:	82 23       	and	r24, r18
     bbc:	84 bb       	out	0x14, r24	; 20
			break;
     bbe:	08 95       	ret
		}
		break;
		
	    case DIO_PORTD:
		switch(copy_u8PinDirection)
     bc0:	44 23       	and	r20, r20
     bc2:	69 f0       	breq	.+26     	; 0xbde <DIO_voidSetPinDirection+0xe8>
     bc4:	41 30       	cpi	r20, 0x01	; 1
     bc6:	b1 f4       	brne	.+44     	; 0xbf4 <DIO_voidSetPinDirection+0xfe>
		{
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRD_REG,copy_u8PinId);
     bc8:	21 b3       	in	r18, 0x11	; 17
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_voidSetPinDirection+0xde>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	6a 95       	dec	r22
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_voidSetPinDirection+0xda>
     bd8:	82 2b       	or	r24, r18
     bda:	81 bb       	out	0x11, r24	; 17
			break;
     bdc:	08 95       	ret
			
			case DIO_PIN_INPUT:
			CLR_BIT(DDRD_REG,copy_u8PinId);
     bde:	21 b3       	in	r18, 0x11	; 17
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <DIO_voidSetPinDirection+0xf4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	6a 95       	dec	r22
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <DIO_voidSetPinDirection+0xf0>
     bee:	80 95       	com	r24
     bf0:	82 23       	and	r24, r18
     bf2:	81 bb       	out	0x11, r24	; 17
     bf4:	08 95       	ret

00000bf6 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8)&&(copy_u8PinValue<2))
     bf6:	84 30       	cpi	r24, 0x04	; 4
     bf8:	08 f0       	brcs	.+2      	; 0xbfc <DIO_voidSetPinValue+0x6>
     bfa:	7c c0       	rjmp	.+248    	; 0xcf4 <DIO_voidSetPinValue+0xfe>
     bfc:	68 30       	cpi	r22, 0x08	; 8
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <DIO_voidSetPinValue+0xc>
     c00:	79 c0       	rjmp	.+242    	; 0xcf4 <DIO_voidSetPinValue+0xfe>
     c02:	42 30       	cpi	r20, 0x02	; 2
     c04:	08 f0       	brcs	.+2      	; 0xc08 <DIO_voidSetPinValue+0x12>
     c06:	76 c0       	rjmp	.+236    	; 0xcf4 <DIO_voidSetPinValue+0xfe>
	{
		switch(copy_u8PortId)
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	19 f1       	breq	.+70     	; 0xc52 <DIO_voidSetPinValue+0x5c>
     c0c:	30 f0       	brcs	.+12     	; 0xc1a <DIO_voidSetPinValue+0x24>
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	e1 f1       	breq	.+120    	; 0xc8a <DIO_voidSetPinValue+0x94>
     c12:	83 30       	cpi	r24, 0x03	; 3
     c14:	09 f4       	brne	.+2      	; 0xc18 <DIO_voidSetPinValue+0x22>
     c16:	54 c0       	rjmp	.+168    	; 0xcc0 <DIO_voidSetPinValue+0xca>
     c18:	08 95       	ret
		{
			case DIO_PORTA:
			switch(copy_u8PinValue)
     c1a:	44 23       	and	r20, r20
     c1c:	71 f0       	breq	.+28     	; 0xc3a <DIO_voidSetPinValue+0x44>
     c1e:	41 30       	cpi	r20, 0x01	; 1
     c20:	09 f0       	breq	.+2      	; 0xc24 <DIO_voidSetPinValue+0x2e>
     c22:	68 c0       	rjmp	.+208    	; 0xcf4 <DIO_voidSetPinValue+0xfe>
			{
				case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG,copy_u8PinId);
     c24:	2b b3       	in	r18, 0x1b	; 27
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_voidSetPinValue+0x3a>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	6a 95       	dec	r22
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_voidSetPinValue+0x36>
     c34:	82 2b       	or	r24, r18
     c36:	8b bb       	out	0x1b, r24	; 27
				break;
     c38:	08 95       	ret
				
				case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG,copy_u8PinId);
     c3a:	2b b3       	in	r18, 0x1b	; 27
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_voidSetPinValue+0x50>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	6a 95       	dec	r22
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_voidSetPinValue+0x4c>
     c4a:	80 95       	com	r24
     c4c:	82 23       	and	r24, r18
     c4e:	8b bb       	out	0x1b, r24	; 27
				break;
     c50:	08 95       	ret
			}
			break;
			
			case DIO_PORTB:
			switch(copy_u8PinValue)
     c52:	44 23       	and	r20, r20
     c54:	71 f0       	breq	.+28     	; 0xc72 <DIO_voidSetPinValue+0x7c>
     c56:	41 30       	cpi	r20, 0x01	; 1
     c58:	09 f0       	breq	.+2      	; 0xc5c <DIO_voidSetPinValue+0x66>
     c5a:	4c c0       	rjmp	.+152    	; 0xcf4 <DIO_voidSetPinValue+0xfe>
			{
				case DIO_PIN_HIGH:
				SET_BIT(PORTB_REG,copy_u8PinId);
     c5c:	28 b3       	in	r18, 0x18	; 24
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <DIO_voidSetPinValue+0x72>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	6a 95       	dec	r22
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <DIO_voidSetPinValue+0x6e>
     c6c:	82 2b       	or	r24, r18
     c6e:	88 bb       	out	0x18, r24	; 24
				break;
     c70:	08 95       	ret
				
				case DIO_PIN_LOW:
				CLR_BIT(PORTB_REG,copy_u8PinId);
     c72:	28 b3       	in	r18, 0x18	; 24
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_voidSetPinValue+0x88>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	6a 95       	dec	r22
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_voidSetPinValue+0x84>
     c82:	80 95       	com	r24
     c84:	82 23       	and	r24, r18
     c86:	88 bb       	out	0x18, r24	; 24
				break;
     c88:	08 95       	ret
			}
			break;
			
			case DIO_PORTC:
			switch(copy_u8PinValue)
     c8a:	44 23       	and	r20, r20
     c8c:	69 f0       	breq	.+26     	; 0xca8 <DIO_voidSetPinValue+0xb2>
     c8e:	41 30       	cpi	r20, 0x01	; 1
     c90:	89 f5       	brne	.+98     	; 0xcf4 <DIO_voidSetPinValue+0xfe>
			{
				case DIO_PIN_HIGH:
				SET_BIT(PORTC_REG,copy_u8PinId);
     c92:	25 b3       	in	r18, 0x15	; 21
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <DIO_voidSetPinValue+0xa8>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	6a 95       	dec	r22
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <DIO_voidSetPinValue+0xa4>
     ca2:	82 2b       	or	r24, r18
     ca4:	85 bb       	out	0x15, r24	; 21
				break;
     ca6:	08 95       	ret
				
				case DIO_PIN_LOW:
				CLR_BIT(PORTC_REG,copy_u8PinId);
     ca8:	25 b3       	in	r18, 0x15	; 21
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_voidSetPinValue+0xbe>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	6a 95       	dec	r22
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_voidSetPinValue+0xba>
     cb8:	80 95       	com	r24
     cba:	82 23       	and	r24, r18
     cbc:	85 bb       	out	0x15, r24	; 21
				break;
     cbe:	08 95       	ret
			}
			break;
			
			case DIO_PORTD:
			switch(copy_u8PinValue)
     cc0:	44 23       	and	r20, r20
     cc2:	69 f0       	breq	.+26     	; 0xcde <DIO_voidSetPinValue+0xe8>
     cc4:	41 30       	cpi	r20, 0x01	; 1
     cc6:	b1 f4       	brne	.+44     	; 0xcf4 <DIO_voidSetPinValue+0xfe>
			{
				case DIO_PIN_HIGH:
				SET_BIT(PORTD_REG,copy_u8PinId);
     cc8:	22 b3       	in	r18, 0x12	; 18
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_voidSetPinValue+0xde>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	6a 95       	dec	r22
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_voidSetPinValue+0xda>
     cd8:	82 2b       	or	r24, r18
     cda:	82 bb       	out	0x12, r24	; 18
				break;
     cdc:	08 95       	ret
				
				case DIO_PIN_LOW:
				CLR_BIT(PORTD_REG,copy_u8PinId);
     cde:	22 b3       	in	r18, 0x12	; 18
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_voidSetPinValue+0xf4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	6a 95       	dec	r22
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_voidSetPinValue+0xf0>
     cee:	80 95       	com	r24
     cf0:	82 23       	and	r24, r18
     cf2:	82 bb       	out	0x12, r24	; 18
     cf4:	08 95       	ret

00000cf6 <DIO_voidGetPinValue>:
}


void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8)&&(copy_pu8PinValue!=NULL))
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	c0 f5       	brcc	.+112    	; 0xd6a <DIO_voidGetPinValue+0x74>
     cfa:	68 30       	cpi	r22, 0x08	; 8
     cfc:	b0 f5       	brcc	.+108    	; 0xd6a <DIO_voidGetPinValue+0x74>
     cfe:	41 15       	cp	r20, r1
     d00:	51 05       	cpc	r21, r1
     d02:	99 f1       	breq	.+102    	; 0xd6a <DIO_voidGetPinValue+0x74>
	{
		switch(copy_u8PortId)
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	89 f0       	breq	.+34     	; 0xd2a <DIO_voidGetPinValue+0x34>
     d08:	28 f0       	brcs	.+10     	; 0xd14 <DIO_voidGetPinValue+0x1e>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	c9 f0       	breq	.+50     	; 0xd40 <DIO_voidGetPinValue+0x4a>
     d0e:	83 30       	cpi	r24, 0x03	; 3
     d10:	11 f1       	breq	.+68     	; 0xd56 <DIO_voidGetPinValue+0x60>
     d12:	08 95       	ret
		{
			case DIO_PORTA:
			*copy_pu8PinValue = GET_BIT(PINA_REG,copy_u8PinId);
     d14:	89 b3       	in	r24, 0x19	; 25
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_voidGetPinValue+0x28>
     d1a:	95 95       	asr	r25
     d1c:	87 95       	ror	r24
     d1e:	6a 95       	dec	r22
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_voidGetPinValue+0x24>
     d22:	81 70       	andi	r24, 0x01	; 1
     d24:	fa 01       	movw	r30, r20
     d26:	80 83       	st	Z, r24
			break;
     d28:	08 95       	ret
			
			case DIO_PORTB:
			*copy_pu8PinValue = GET_BIT(PINB_REG,copy_u8PinId);
     d2a:	86 b3       	in	r24, 0x16	; 22
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_voidGetPinValue+0x3e>
     d30:	95 95       	asr	r25
     d32:	87 95       	ror	r24
     d34:	6a 95       	dec	r22
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_voidGetPinValue+0x3a>
     d38:	81 70       	andi	r24, 0x01	; 1
     d3a:	fa 01       	movw	r30, r20
     d3c:	80 83       	st	Z, r24
			break;
     d3e:	08 95       	ret
			
			case DIO_PORTC:
			*copy_pu8PinValue = GET_BIT(PINC_REG,copy_u8PinId);
     d40:	83 b3       	in	r24, 0x13	; 19
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_voidGetPinValue+0x54>
     d46:	95 95       	asr	r25
     d48:	87 95       	ror	r24
     d4a:	6a 95       	dec	r22
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_voidGetPinValue+0x50>
     d4e:	81 70       	andi	r24, 0x01	; 1
     d50:	fa 01       	movw	r30, r20
     d52:	80 83       	st	Z, r24
			break;
     d54:	08 95       	ret
			
			case DIO_PORTD:
			*copy_pu8PinValue = GET_BIT(PIND_REG,copy_u8PinId);
     d56:	80 b3       	in	r24, 0x10	; 16
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_voidGetPinValue+0x6a>
     d5c:	95 95       	asr	r25
     d5e:	87 95       	ror	r24
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_voidGetPinValue+0x66>
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	fa 01       	movw	r30, r20
     d68:	80 83       	st	Z, r24
     d6a:	08 95       	ret

00000d6c <EXTI_voidInit>:

//PD3 INT1
void EXTI_voidInit(u8 copy_u8InterruptSource, u8 copy_u8TriggerEdge)
{
	//Triggering Mode
	switch(copy_u8InterruptSource)
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	61 f1       	breq	.+88     	; 0xdc8 <EXTI_voidInit+0x5c>
     d70:	20 f0       	brcs	.+8      	; 0xd7a <EXTI_voidInit+0xe>
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	09 f4       	brne	.+2      	; 0xd78 <EXTI_voidInit+0xc>
     d76:	4f c0       	rjmp	.+158    	; 0xe16 <EXTI_voidInit+0xaa>
     d78:	08 95       	ret
	{
		case EXTI_INT0:
		switch(copy_u8TriggerEdge)
     d7a:	61 30       	cpi	r22, 0x01	; 1
     d7c:	69 f0       	breq	.+26     	; 0xd98 <EXTI_voidInit+0x2c>
     d7e:	28 f0       	brcs	.+10     	; 0xd8a <EXTI_voidInit+0x1e>
     d80:	62 30       	cpi	r22, 0x02	; 2
     d82:	89 f0       	breq	.+34     	; 0xda6 <EXTI_voidInit+0x3a>
     d84:	63 30       	cpi	r22, 0x03	; 3
     d86:	b1 f0       	breq	.+44     	; 0xdb4 <EXTI_voidInit+0x48>
     d88:	1b c0       	rjmp	.+54     	; 0xdc0 <EXTI_voidInit+0x54>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR_REG,ISC00);
     d8a:	85 b7       	in	r24, 0x35	; 53
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC01);
     d90:	85 b7       	in	r24, 0x35	; 53
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	85 bf       	out	0x35, r24	; 53
			break;
     d96:	14 c0       	rjmp	.+40     	; 0xdc0 <EXTI_voidInit+0x54>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR_REG,ISC00);
     d98:	85 b7       	in	r24, 0x35	; 53
     d9a:	8e 7f       	andi	r24, 0xFE	; 254
     d9c:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC01);
     d9e:	85 b7       	in	r24, 0x35	; 53
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	85 bf       	out	0x35, r24	; 53
			break;
     da4:	0d c0       	rjmp	.+26     	; 0xdc0 <EXTI_voidInit+0x54>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,ISC00);
     da6:	85 b7       	in	r24, 0x35	; 53
     da8:	8e 7f       	andi	r24, 0xFE	; 254
     daa:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_REG,ISC01);
     dac:	85 b7       	in	r24, 0x35	; 53
     dae:	8d 7f       	andi	r24, 0xFD	; 253
     db0:	85 bf       	out	0x35, r24	; 53
			break;
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <EXTI_voidInit+0x54>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR_REG,ISC00);
     db4:	85 b7       	in	r24, 0x35	; 53
     db6:	81 60       	ori	r24, 0x01	; 1
     db8:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_REG,ISC01);
     dba:	85 b7       	in	r24, 0x35	; 53
     dbc:	8d 7f       	andi	r24, 0xFD	; 253
     dbe:	85 bf       	out	0x35, r24	; 53
			break;
		}
		//Enable EXTERNAL INTERRUPT ZERO(PERIPHRAL INTERRUPT ENABLE)
		SET_BIT(GICR_REG,INT0);
     dc0:	8b b7       	in	r24, 0x3b	; 59
     dc2:	80 64       	ori	r24, 0x40	; 64
     dc4:	8b bf       	out	0x3b, r24	; 59
		break;
     dc6:	08 95       	ret
		
		case EXTI_INT1:
		switch(copy_u8TriggerEdge)
     dc8:	61 30       	cpi	r22, 0x01	; 1
     dca:	69 f0       	breq	.+26     	; 0xde6 <EXTI_voidInit+0x7a>
     dcc:	28 f0       	brcs	.+10     	; 0xdd8 <EXTI_voidInit+0x6c>
     dce:	62 30       	cpi	r22, 0x02	; 2
     dd0:	c1 f0       	breq	.+48     	; 0xe02 <EXTI_voidInit+0x96>
     dd2:	63 30       	cpi	r22, 0x03	; 3
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <EXTI_voidInit+0x88>
     dd6:	1b c0       	rjmp	.+54     	; 0xe0e <EXTI_voidInit+0xa2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR_REG,ISC11);
     dd8:	85 b7       	in	r24, 0x35	; 53
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR_REG,ISC10);
     dde:	85 b7       	in	r24, 0x35	; 53
     de0:	84 60       	ori	r24, 0x04	; 4
     de2:	85 bf       	out	0x35, r24	; 53
			break;
     de4:	14 c0       	rjmp	.+40     	; 0xe0e <EXTI_voidInit+0xa2>
			
			case EXTI_FALLING_EDGE:
			SET_BIT(MCUCR_REG,ISC11);
     de6:	85 b7       	in	r24, 0x35	; 53
     de8:	88 60       	ori	r24, 0x08	; 8
     dea:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_REG,ISC10);
     dec:	85 b7       	in	r24, 0x35	; 53
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	85 bf       	out	0x35, r24	; 53
			break;
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <EXTI_voidInit+0xa2>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR_REG,ISC10);
     df4:	85 b7       	in	r24, 0x35	; 53
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_REG,ISC11);
     dfa:	85 b7       	in	r24, 0x35	; 53
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	85 bf       	out	0x35, r24	; 53
			break;
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <EXTI_voidInit+0xa2>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,ISC11);
     e02:	85 b7       	in	r24, 0x35	; 53
     e04:	87 7f       	andi	r24, 0xF7	; 247
     e06:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR_REG,ISC10);
     e08:	85 b7       	in	r24, 0x35	; 53
     e0a:	8b 7f       	andi	r24, 0xFB	; 251
     e0c:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR_REG,INT1);
     e0e:	8b b7       	in	r24, 0x3b	; 59
     e10:	80 68       	ori	r24, 0x80	; 128
     e12:	8b bf       	out	0x3b, r24	; 59
		break;
     e14:	08 95       	ret
		
		case EXTI_INT2:
		switch(copy_u8TriggerEdge)
     e16:	66 23       	and	r22, r22
     e18:	31 f0       	breq	.+12     	; 0xe26 <EXTI_voidInit+0xba>
     e1a:	61 30       	cpi	r22, 0x01	; 1
     e1c:	39 f4       	brne	.+14     	; 0xe2c <EXTI_voidInit+0xc0>
		{
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR_REG,ISC2);
     e1e:	84 b7       	in	r24, 0x34	; 52
     e20:	8f 7b       	andi	r24, 0xBF	; 191
     e22:	84 bf       	out	0x34, r24	; 52
			break;
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <EXTI_voidInit+0xc0>
			
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR_REG,ISC2);
     e26:	84 b7       	in	r24, 0x34	; 52
     e28:	80 64       	ori	r24, 0x40	; 64
     e2a:	84 bf       	out	0x34, r24	; 52
		}
		SET_BIT(GICR_REG,INT2);
     e2c:	8b b7       	in	r24, 0x3b	; 59
     e2e:	80 62       	ori	r24, 0x20	; 32
     e30:	8b bf       	out	0x3b, r24	; 59
     e32:	08 95       	ret

00000e34 <GI_voidEnable>:


void GI_voidEnable(void)
{
	// Enable GI
	SET_BIT(SREG_REG,I);
     e34:	8f b7       	in	r24, 0x3f	; 63
     e36:	80 68       	ori	r24, 0x80	; 128
     e38:	8f bf       	out	0x3f, r24	; 63
     e3a:	08 95       	ret

00000e3c <PWM_voidInitChannel_1A>:
			OCR2_REG = ((copy_u8DutyCycle * 256)/100)-1;
			
			//Set PreScaler Value = 64
			SET_BIT(TCCR2_REG,CS22);
			CLR_BIT(TCCR2_REG,CS21);
			CLR_BIT(TCCR2_REG,CS20);
     e3c:	8f b5       	in	r24, 0x2f	; 47
     e3e:	8e 7f       	andi	r24, 0xFE	; 254
     e40:	8f bd       	out	0x2f, r24	; 47
     e42:	8f b5       	in	r24, 0x2f	; 47
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	8f bd       	out	0x2f, r24	; 47
     e48:	8e b5       	in	r24, 0x2e	; 46
     e4a:	88 60       	ori	r24, 0x08	; 8
     e4c:	8e bd       	out	0x2e, r24	; 46
     e4e:	8e b5       	in	r24, 0x2e	; 46
     e50:	80 61       	ori	r24, 0x10	; 16
     e52:	8e bd       	out	0x2e, r24	; 46
     e54:	8f b5       	in	r24, 0x2f	; 47
     e56:	8f 7b       	andi	r24, 0xBF	; 191
     e58:	8f bd       	out	0x2f, r24	; 47
     e5a:	8f b5       	in	r24, 0x2f	; 47
     e5c:	80 68       	ori	r24, 0x80	; 128
     e5e:	8f bd       	out	0x2f, r24	; 47
     e60:	08 95       	ret

00000e62 <PWM_voidGenerate_PWM_Channel_1A>:
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
     e70:	6a 01       	movw	r12, r20
     e72:	7b 01       	movw	r14, r22
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	48 ec       	ldi	r20, 0xC8	; 200
     e7a:	52 e4       	ldi	r21, 0x42	; 66
     e7c:	c7 01       	movw	r24, r14
     e7e:	b6 01       	movw	r22, r12
     e80:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__cmpsf2>
     e84:	18 16       	cp	r1, r24
     e86:	94 f1       	brlt	.+100    	; 0xeec <PWM_voidGenerate_PWM_Channel_1A+0x8a>
     e88:	9e 01       	movw	r18, r28
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	60 e9       	ldi	r22, 0x90	; 144
     e90:	70 ed       	ldi	r23, 0xD0	; 208
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 97 0a 	call	0x152e	; 0x152e <__udivmodsi4>
     e9a:	21 50       	subi	r18, 0x01	; 1
     e9c:	31 09       	sbc	r19, r1
     e9e:	37 bd       	out	0x27, r19	; 39
     ea0:	26 bd       	out	0x26, r18	; 38
     ea2:	66 b5       	in	r22, 0x26	; 38
     ea4:	77 b5       	in	r23, 0x27	; 39
     ea6:	6f 5f       	subi	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__floatunsisf>
     eb2:	a7 01       	movw	r20, r14
     eb4:	96 01       	movw	r18, r12
     eb6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3>
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	48 ec       	ldi	r20, 0xC8	; 200
     ec0:	52 e4       	ldi	r21, 0x42	; 66
     ec2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__divsf3>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e8       	ldi	r20, 0x80	; 128
     ecc:	5f e3       	ldi	r21, 0x3F	; 63
     ece:	0e 94 65 08 	call	0x10ca	; 0x10ca <__subsf3>
     ed2:	0e 94 49 09 	call	0x1292	; 0x1292 <__fixunssfsi>
     ed6:	7b bd       	out	0x2b, r23	; 43
     ed8:	6a bd       	out	0x2a, r22	; 42
     eda:	8e b5       	in	r24, 0x2e	; 46
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	8e bd       	out	0x2e, r24	; 46
     ee0:	8e b5       	in	r24, 0x2e	; 46
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	8e bd       	out	0x2e, r24	; 46
     ee6:	8e b5       	in	r24, 0x2e	; 46
     ee8:	8b 7f       	andi	r24, 0xFB	; 251
     eea:	8e bd       	out	0x2e, r24	; 46
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	08 95       	ret

00000efa <PWM_voidDutyCycleCalculations>:
		{
			//retun error state
		}
}
void PWM_voidDutyCycleCalculations(u32* copy_pu32DutyCycle,u32 copy_pu32onTicks,u32 copy_pu32onCounter,u32 copy_pu32totalTicks,u32 copy_pu32totalCounter)
{
     efa:	6f 92       	push	r6
     efc:	7f 92       	push	r7
     efe:	8f 92       	push	r8
     f00:	9f 92       	push	r9
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	cf 92       	push	r12
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	3c 01       	movw	r6, r24
	 
	 
	if( copy_pu32DutyCycle!= NULL)
     f1c:	89 2b       	or	r24, r25
     f1e:	11 f1       	breq	.+68     	; 0xf64 <PWM_voidDutyCycleCalculations+0x6a>
	{
	   		*copy_pu32DutyCycle = (copy_pu32onTicks + (copy_pu32onCounter * 256)) * 100 / (copy_pu32totalTicks + (copy_pu32totalCounter * 256));
     f20:	32 2f       	mov	r19, r18
     f22:	21 2f       	mov	r18, r17
     f24:	10 2f       	mov	r17, r16
     f26:	00 27       	eor	r16, r16
     f28:	d9 01       	movw	r26, r18
     f2a:	c8 01       	movw	r24, r16
     f2c:	84 0f       	add	r24, r20
     f2e:	95 1f       	adc	r25, r21
     f30:	a6 1f       	adc	r26, r22
     f32:	b7 1f       	adc	r27, r23
     f34:	9c 01       	movw	r18, r24
     f36:	ad 01       	movw	r20, r26
     f38:	a4 e6       	ldi	r26, 0x64	; 100
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__muluhisi3>
     f40:	3a 2d       	mov	r19, r10
     f42:	29 2d       	mov	r18, r9
     f44:	18 2d       	mov	r17, r8
     f46:	00 27       	eor	r16, r16
     f48:	a9 01       	movw	r20, r18
     f4a:	98 01       	movw	r18, r16
     f4c:	2c 0d       	add	r18, r12
     f4e:	3d 1d       	adc	r19, r13
     f50:	4e 1d       	adc	r20, r14
     f52:	5f 1d       	adc	r21, r15
     f54:	0e 94 97 0a 	call	0x152e	; 0x152e <__udivmodsi4>
     f58:	d3 01       	movw	r26, r6
     f5a:	2d 93       	st	X+, r18
     f5c:	3d 93       	st	X+, r19
     f5e:	4d 93       	st	X+, r20
     f60:	5c 93       	st	X, r21
     f62:	13 97       	sbiw	r26, 0x03	; 3
	}
	else
	{
		//return any error state
	}
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	7f 90       	pop	r7
     f7e:	6f 90       	pop	r6
     f80:	08 95       	ret

00000f82 <PWM_voidFrequencyCalculation>:
void PWM_voidFrequencyCalculation(u32* copy_pu32Frequency ,u32 copy_pu32totalTicks,u32 copy_pu32totalCounter)
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
	 
	 if(  copy_pu32Frequency!= NULL)
     f8c:	89 2b       	or	r24, r25
     f8e:	e1 f0       	breq	.+56     	; 0xfc8 <PWM_voidFrequencyCalculation+0x46>
	 {
		 *copy_pu32Frequency = 1000000UL / ((copy_pu32totalTicks + (copy_pu32totalCounter * 256)  ) * 4);
     f90:	32 2f       	mov	r19, r18
     f92:	21 2f       	mov	r18, r17
     f94:	10 2f       	mov	r17, r16
     f96:	00 27       	eor	r16, r16
     f98:	40 0f       	add	r20, r16
     f9a:	51 1f       	adc	r21, r17
     f9c:	62 1f       	adc	r22, r18
     f9e:	73 1f       	adc	r23, r19
     fa0:	9a 01       	movw	r18, r20
     fa2:	ab 01       	movw	r20, r22
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	44 1f       	adc	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	44 1f       	adc	r20, r20
     fb2:	55 1f       	adc	r21, r21
     fb4:	60 e4       	ldi	r22, 0x40	; 64
     fb6:	72 e4       	ldi	r23, 0x42	; 66
     fb8:	8f e0       	ldi	r24, 0x0F	; 15
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 97 0a 	call	0x152e	; 0x152e <__udivmodsi4>
     fc0:	28 83       	st	Y, r18
     fc2:	39 83       	std	Y+1, r19	; 0x01
     fc4:	4a 83       	std	Y+2, r20	; 0x02
     fc6:	5b 83       	std	Y+3, r21	; 0x03
	 }
	 else
	 {
		 //return any error state
	 }
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <PWM_voidPeriodicTimeCalculations>:
void PWM_voidPeriodicTimeCalculations(u32 copy_pu32Frequency,u32* copy_pu32PeriodicTime)
{
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	8b 01       	movw	r16, r22
     fdc:	9c 01       	movw	r18, r24
     fde:	ea 01       	movw	r28, r20
	if( copy_pu32PeriodicTime!= NULL)
     fe0:	20 97       	sbiw	r28, 0x00	; 0
     fe2:	61 f0       	breq	.+24     	; 0xffc <PWM_voidPeriodicTimeCalculations+0x2a>
	{
		
	*copy_pu32PeriodicTime = (1000UL /(copy_pu32Frequency));// in millisecond
     fe4:	68 ee       	ldi	r22, 0xE8	; 232
     fe6:	73 e0       	ldi	r23, 0x03	; 3
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a9 01       	movw	r20, r18
     fee:	98 01       	movw	r18, r16
     ff0:	0e 94 97 0a 	call	0x152e	; 0x152e <__udivmodsi4>
     ff4:	28 83       	st	Y, r18
     ff6:	39 83       	std	Y+1, r19	; 0x01
     ff8:	4a 83       	std	Y+2, r20	; 0x02
     ffa:	5b 83       	std	Y+3, r21	; 0x03
	}
	else
	{
		
	}
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <PWM_voidOnTimeDuration>:
void PWM_voidOnTimeDuration(u32 copy_pu32PeriodicTime,u32 copy_pu32DutyCycle,u32* copy_pu32Ton)
{
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
	if(  copy_pu32Ton != NULL)
    101e:	01 15       	cp	r16, r1
    1020:	11 05       	cpc	r17, r1
    1022:	f9 f0       	breq	.+62     	; 0x1062 <PWM_voidOnTimeDuration+0x5c>
    1024:	e8 01       	movw	r28, r16
    1026:	89 01       	movw	r16, r18
    1028:	9a 01       	movw	r18, r20
    102a:	6b 01       	movw	r12, r22
    102c:	7c 01       	movw	r14, r24
	{
		
	*copy_pu32Ton = ((((float)copy_pu32DutyCycle)/100UL)*(copy_pu32PeriodicTime));
    102e:	c9 01       	movw	r24, r18
    1030:	b8 01       	movw	r22, r16
    1032:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__floatunsisf>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	48 ec       	ldi	r20, 0xC8	; 200
    103c:	52 e4       	ldi	r21, 0x42	; 66
    103e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__divsf3>
    1042:	4b 01       	movw	r8, r22
    1044:	5c 01       	movw	r10, r24
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__floatunsisf>
    104e:	a5 01       	movw	r20, r10
    1050:	94 01       	movw	r18, r8
    1052:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3>
    1056:	0e 94 49 09 	call	0x1292	; 0x1292 <__fixunssfsi>
    105a:	68 83       	st	Y, r22
    105c:	79 83       	std	Y+1, r23	; 0x01
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	9b 83       	std	Y+3, r25	; 0x03
	}
	else
	{
		//return any error state
	}
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	9f 90       	pop	r9
    1078:	8f 90       	pop	r8
    107a:	08 95       	ret

0000107c <PWM_voidOffTimeDuration>:
void PWM_voidOffTimeDuration(u32 copy_pu32PeriodicTime,u32 copy_pu32Ton,u32* copy_pu32TOff)
{
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
	if(copy_pu32TOff != NULL)
    1080:	01 15       	cp	r16, r1
    1082:	11 05       	cpc	r17, r1
    1084:	59 f0       	breq	.+22     	; 0x109c <PWM_voidOffTimeDuration+0x20>
	{
		
	*copy_pu32TOff = (copy_pu32PeriodicTime - copy_pu32Ton);
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	82 1b       	sub	r24, r18
    108c:	93 0b       	sbc	r25, r19
    108e:	a4 0b       	sbc	r26, r20
    1090:	b5 0b       	sbc	r27, r21
    1092:	f8 01       	movw	r30, r16
    1094:	80 83       	st	Z, r24
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	a2 83       	std	Z+2, r26	; 0x02
    109a:	b3 83       	std	Z+3, r27	; 0x03
	}
	else
	{
		//return any error state
	}
}
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <TMR0_voidInit>:

void TMR0_voidInit(void)
{
	//#if TMR0_MODE == TMR0_NORMAL_MODE
	// Select Mode = Normal Mode
	CLR_BIT(TCCR0_REG,WGM00);
    10a2:	83 b7       	in	r24, 0x33	; 51
    10a4:	8f 7b       	andi	r24, 0xBF	; 191
    10a6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0_REG,WGM01);
    10a8:	83 b7       	in	r24, 0x33	; 51
    10aa:	87 7f       	andi	r24, 0xF7	; 247
    10ac:	83 bf       	out	0x33, r24	; 51
	
	// Enable OVF Interrupt
	SET_BIT(TIMSK_REG,TOIE0);
    10ae:	89 b7       	in	r24, 0x39	; 57
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	89 bf       	out	0x39, r24	; 57
    10b4:	08 95       	ret

000010b6 <TMR0_voidStart>:

	
	
	// Select Prescaler Value = 64 
	
	SET_BIT(TCCR0_REG,CS00);
    10b6:	83 b7       	in	r24, 0x33	; 51
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REG,CS01);
    10bc:	83 b7       	in	r24, 0x33	; 51
    10be:	82 60       	ori	r24, 0x02	; 2
    10c0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0_REG,CS02);
    10c2:	83 b7       	in	r24, 0x33	; 51
    10c4:	8b 7f       	andi	r24, 0xFB	; 251
    10c6:	83 bf       	out	0x33, r24	; 51
    10c8:	08 95       	ret

000010ca <__subsf3>:
    10ca:	50 58       	subi	r21, 0x80	; 128

000010cc <__addsf3>:
    10cc:	bb 27       	eor	r27, r27
    10ce:	aa 27       	eor	r26, r26
    10d0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__addsf3x>
    10d4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_round>
    10d8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscA>
    10dc:	38 f0       	brcs	.+14     	; 0x10ec <__addsf3+0x20>
    10de:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_pscB>
    10e2:	20 f0       	brcs	.+8      	; 0x10ec <__addsf3+0x20>
    10e4:	39 f4       	brne	.+14     	; 0x10f4 <__addsf3+0x28>
    10e6:	9f 3f       	cpi	r25, 0xFF	; 255
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <__addsf3+0x24>
    10ea:	26 f4       	brtc	.+8      	; 0x10f4 <__addsf3+0x28>
    10ec:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_nan>
    10f0:	0e f4       	brtc	.+2      	; 0x10f4 <__addsf3+0x28>
    10f2:	e0 95       	com	r30
    10f4:	e7 fb       	bst	r30, 7
    10f6:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_inf>

000010fa <__addsf3x>:
    10fa:	e9 2f       	mov	r30, r25
    10fc:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_split3>
    1100:	58 f3       	brcs	.-42     	; 0x10d8 <__addsf3+0xc>
    1102:	ba 17       	cp	r27, r26
    1104:	62 07       	cpc	r22, r18
    1106:	73 07       	cpc	r23, r19
    1108:	84 07       	cpc	r24, r20
    110a:	95 07       	cpc	r25, r21
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__addsf3x+0x1c>
    110e:	79 f4       	brne	.+30     	; 0x112e <__addsf3x+0x34>
    1110:	a6 f5       	brtc	.+104    	; 0x117a <__addsf3x+0x80>
    1112:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_zero>
    1116:	0e f4       	brtc	.+2      	; 0x111a <__addsf3x+0x20>
    1118:	e0 95       	com	r30
    111a:	0b 2e       	mov	r0, r27
    111c:	ba 2f       	mov	r27, r26
    111e:	a0 2d       	mov	r26, r0
    1120:	0b 01       	movw	r0, r22
    1122:	b9 01       	movw	r22, r18
    1124:	90 01       	movw	r18, r0
    1126:	0c 01       	movw	r0, r24
    1128:	ca 01       	movw	r24, r20
    112a:	a0 01       	movw	r20, r0
    112c:	11 24       	eor	r1, r1
    112e:	ff 27       	eor	r31, r31
    1130:	59 1b       	sub	r21, r25
    1132:	99 f0       	breq	.+38     	; 0x115a <__addsf3x+0x60>
    1134:	59 3f       	cpi	r21, 0xF9	; 249
    1136:	50 f4       	brcc	.+20     	; 0x114c <__addsf3x+0x52>
    1138:	50 3e       	cpi	r21, 0xE0	; 224
    113a:	68 f1       	brcs	.+90     	; 0x1196 <__addsf3x+0x9c>
    113c:	1a 16       	cp	r1, r26
    113e:	f0 40       	sbci	r31, 0x00	; 0
    1140:	a2 2f       	mov	r26, r18
    1142:	23 2f       	mov	r18, r19
    1144:	34 2f       	mov	r19, r20
    1146:	44 27       	eor	r20, r20
    1148:	58 5f       	subi	r21, 0xF8	; 248
    114a:	f3 cf       	rjmp	.-26     	; 0x1132 <__addsf3x+0x38>
    114c:	46 95       	lsr	r20
    114e:	37 95       	ror	r19
    1150:	27 95       	ror	r18
    1152:	a7 95       	ror	r26
    1154:	f0 40       	sbci	r31, 0x00	; 0
    1156:	53 95       	inc	r21
    1158:	c9 f7       	brne	.-14     	; 0x114c <__addsf3x+0x52>
    115a:	7e f4       	brtc	.+30     	; 0x117a <__addsf3x+0x80>
    115c:	1f 16       	cp	r1, r31
    115e:	ba 0b       	sbc	r27, r26
    1160:	62 0b       	sbc	r22, r18
    1162:	73 0b       	sbc	r23, r19
    1164:	84 0b       	sbc	r24, r20
    1166:	ba f0       	brmi	.+46     	; 0x1196 <__addsf3x+0x9c>
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	a1 f0       	breq	.+40     	; 0x1194 <__addsf3x+0x9a>
    116c:	ff 0f       	add	r31, r31
    116e:	bb 1f       	adc	r27, r27
    1170:	66 1f       	adc	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	c2 f7       	brpl	.-16     	; 0x1168 <__addsf3x+0x6e>
    1178:	0e c0       	rjmp	.+28     	; 0x1196 <__addsf3x+0x9c>
    117a:	ba 0f       	add	r27, r26
    117c:	62 1f       	adc	r22, r18
    117e:	73 1f       	adc	r23, r19
    1180:	84 1f       	adc	r24, r20
    1182:	48 f4       	brcc	.+18     	; 0x1196 <__addsf3x+0x9c>
    1184:	87 95       	ror	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	b7 95       	ror	r27
    118c:	f7 95       	ror	r31
    118e:	9e 3f       	cpi	r25, 0xFE	; 254
    1190:	08 f0       	brcs	.+2      	; 0x1194 <__addsf3x+0x9a>
    1192:	b0 cf       	rjmp	.-160    	; 0x10f4 <__addsf3+0x28>
    1194:	93 95       	inc	r25
    1196:	88 0f       	add	r24, r24
    1198:	08 f0       	brcs	.+2      	; 0x119c <__addsf3x+0xa2>
    119a:	99 27       	eor	r25, r25
    119c:	ee 0f       	add	r30, r30
    119e:	97 95       	ror	r25
    11a0:	87 95       	ror	r24
    11a2:	08 95       	ret

000011a4 <__cmpsf2>:
    11a4:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_cmp>
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <__cmpsf2+0x8>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	08 95       	ret

000011ae <__divsf3>:
    11ae:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__divsf3x>
    11b2:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_round>
    11b6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_pscB>
    11ba:	58 f0       	brcs	.+22     	; 0x11d2 <__divsf3+0x24>
    11bc:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscA>
    11c0:	40 f0       	brcs	.+16     	; 0x11d2 <__divsf3+0x24>
    11c2:	29 f4       	brne	.+10     	; 0x11ce <__divsf3+0x20>
    11c4:	5f 3f       	cpi	r21, 0xFF	; 255
    11c6:	29 f0       	breq	.+10     	; 0x11d2 <__divsf3+0x24>
    11c8:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_inf>
    11cc:	51 11       	cpse	r21, r1
    11ce:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_szero>
    11d2:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_nan>

000011d6 <__divsf3x>:
    11d6:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_split3>
    11da:	68 f3       	brcs	.-38     	; 0x11b6 <__divsf3+0x8>

000011dc <__divsf3_pse>:
    11dc:	99 23       	and	r25, r25
    11de:	b1 f3       	breq	.-20     	; 0x11cc <__divsf3+0x1e>
    11e0:	55 23       	and	r21, r21
    11e2:	91 f3       	breq	.-28     	; 0x11c8 <__divsf3+0x1a>
    11e4:	95 1b       	sub	r25, r21
    11e6:	55 0b       	sbc	r21, r21
    11e8:	bb 27       	eor	r27, r27
    11ea:	aa 27       	eor	r26, r26
    11ec:	62 17       	cp	r22, r18
    11ee:	73 07       	cpc	r23, r19
    11f0:	84 07       	cpc	r24, r20
    11f2:	38 f0       	brcs	.+14     	; 0x1202 <__divsf3_pse+0x26>
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	44 1f       	adc	r20, r20
    11fe:	aa 1f       	adc	r26, r26
    1200:	a9 f3       	breq	.-22     	; 0x11ec <__divsf3_pse+0x10>
    1202:	35 d0       	rcall	.+106    	; 0x126e <__divsf3_pse+0x92>
    1204:	0e 2e       	mov	r0, r30
    1206:	3a f0       	brmi	.+14     	; 0x1216 <__divsf3_pse+0x3a>
    1208:	e0 e8       	ldi	r30, 0x80	; 128
    120a:	32 d0       	rcall	.+100    	; 0x1270 <__divsf3_pse+0x94>
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	50 40       	sbci	r21, 0x00	; 0
    1210:	e6 95       	lsr	r30
    1212:	00 1c       	adc	r0, r0
    1214:	ca f7       	brpl	.-14     	; 0x1208 <__divsf3_pse+0x2c>
    1216:	2b d0       	rcall	.+86     	; 0x126e <__divsf3_pse+0x92>
    1218:	fe 2f       	mov	r31, r30
    121a:	29 d0       	rcall	.+82     	; 0x126e <__divsf3_pse+0x92>
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	bb 1f       	adc	r27, r27
    1224:	26 17       	cp	r18, r22
    1226:	37 07       	cpc	r19, r23
    1228:	48 07       	cpc	r20, r24
    122a:	ab 07       	cpc	r26, r27
    122c:	b0 e8       	ldi	r27, 0x80	; 128
    122e:	09 f0       	breq	.+2      	; 0x1232 <__divsf3_pse+0x56>
    1230:	bb 0b       	sbc	r27, r27
    1232:	80 2d       	mov	r24, r0
    1234:	bf 01       	movw	r22, r30
    1236:	ff 27       	eor	r31, r31
    1238:	93 58       	subi	r25, 0x83	; 131
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	3a f0       	brmi	.+14     	; 0x124c <__divsf3_pse+0x70>
    123e:	9e 3f       	cpi	r25, 0xFE	; 254
    1240:	51 05       	cpc	r21, r1
    1242:	78 f0       	brcs	.+30     	; 0x1262 <__divsf3_pse+0x86>
    1244:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_inf>
    1248:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_szero>
    124c:	5f 3f       	cpi	r21, 0xFF	; 255
    124e:	e4 f3       	brlt	.-8      	; 0x1248 <__divsf3_pse+0x6c>
    1250:	98 3e       	cpi	r25, 0xE8	; 232
    1252:	d4 f3       	brlt	.-12     	; 0x1248 <__divsf3_pse+0x6c>
    1254:	86 95       	lsr	r24
    1256:	77 95       	ror	r23
    1258:	67 95       	ror	r22
    125a:	b7 95       	ror	r27
    125c:	f7 95       	ror	r31
    125e:	9f 5f       	subi	r25, 0xFF	; 255
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__divsf3_pse+0x78>
    1262:	88 0f       	add	r24, r24
    1264:	91 1d       	adc	r25, r1
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	97 f9       	bld	r25, 7
    126c:	08 95       	ret
    126e:	e1 e0       	ldi	r30, 0x01	; 1
    1270:	66 0f       	add	r22, r22
    1272:	77 1f       	adc	r23, r23
    1274:	88 1f       	adc	r24, r24
    1276:	bb 1f       	adc	r27, r27
    1278:	62 17       	cp	r22, r18
    127a:	73 07       	cpc	r23, r19
    127c:	84 07       	cpc	r24, r20
    127e:	ba 07       	cpc	r27, r26
    1280:	20 f0       	brcs	.+8      	; 0x128a <__divsf3_pse+0xae>
    1282:	62 1b       	sub	r22, r18
    1284:	73 0b       	sbc	r23, r19
    1286:	84 0b       	sbc	r24, r20
    1288:	ba 0b       	sbc	r27, r26
    128a:	ee 1f       	adc	r30, r30
    128c:	88 f7       	brcc	.-30     	; 0x1270 <__divsf3_pse+0x94>
    128e:	e0 95       	com	r30
    1290:	08 95       	ret

00001292 <__fixunssfsi>:
    1292:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_splitA>
    1296:	88 f0       	brcs	.+34     	; 0x12ba <__fixunssfsi+0x28>
    1298:	9f 57       	subi	r25, 0x7F	; 127
    129a:	98 f0       	brcs	.+38     	; 0x12c2 <__fixunssfsi+0x30>
    129c:	b9 2f       	mov	r27, r25
    129e:	99 27       	eor	r25, r25
    12a0:	b7 51       	subi	r27, 0x17	; 23
    12a2:	b0 f0       	brcs	.+44     	; 0x12d0 <__fixunssfsi+0x3e>
    12a4:	e1 f0       	breq	.+56     	; 0x12de <__fixunssfsi+0x4c>
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	1a f0       	brmi	.+6      	; 0x12b6 <__fixunssfsi+0x24>
    12b0:	ba 95       	dec	r27
    12b2:	c9 f7       	brne	.-14     	; 0x12a6 <__fixunssfsi+0x14>
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <__fixunssfsi+0x4c>
    12b6:	b1 30       	cpi	r27, 0x01	; 1
    12b8:	91 f0       	breq	.+36     	; 0x12de <__fixunssfsi+0x4c>
    12ba:	0e 94 23 0a 	call	0x1446	; 0x1446 <__fp_zero>
    12be:	b1 e0       	ldi	r27, 0x01	; 1
    12c0:	08 95       	ret
    12c2:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__fp_zero>
    12c6:	67 2f       	mov	r22, r23
    12c8:	78 2f       	mov	r23, r24
    12ca:	88 27       	eor	r24, r24
    12cc:	b8 5f       	subi	r27, 0xF8	; 248
    12ce:	39 f0       	breq	.+14     	; 0x12de <__fixunssfsi+0x4c>
    12d0:	b9 3f       	cpi	r27, 0xF9	; 249
    12d2:	cc f3       	brlt	.-14     	; 0x12c6 <__fixunssfsi+0x34>
    12d4:	86 95       	lsr	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b3 95       	inc	r27
    12dc:	d9 f7       	brne	.-10     	; 0x12d4 <__fixunssfsi+0x42>
    12de:	3e f4       	brtc	.+14     	; 0x12ee <__fixunssfsi+0x5c>
    12e0:	90 95       	com	r25
    12e2:	80 95       	com	r24
    12e4:	70 95       	com	r23
    12e6:	61 95       	neg	r22
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	08 95       	ret

000012f0 <__floatunsisf>:
    12f0:	e8 94       	clt
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <__floatsisf+0x12>

000012f4 <__floatsisf>:
    12f4:	97 fb       	bst	r25, 7
    12f6:	3e f4       	brtc	.+14     	; 0x1306 <__floatsisf+0x12>
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	99 23       	and	r25, r25
    1308:	a9 f0       	breq	.+42     	; 0x1334 <__floatsisf+0x40>
    130a:	f9 2f       	mov	r31, r25
    130c:	96 e9       	ldi	r25, 0x96	; 150
    130e:	bb 27       	eor	r27, r27
    1310:	93 95       	inc	r25
    1312:	f6 95       	lsr	r31
    1314:	87 95       	ror	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	b7 95       	ror	r27
    131c:	f1 11       	cpse	r31, r1
    131e:	f8 cf       	rjmp	.-16     	; 0x1310 <__floatsisf+0x1c>
    1320:	fa f4       	brpl	.+62     	; 0x1360 <__floatsisf+0x6c>
    1322:	bb 0f       	add	r27, r27
    1324:	11 f4       	brne	.+4      	; 0x132a <__floatsisf+0x36>
    1326:	60 ff       	sbrs	r22, 0
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <__floatsisf+0x6c>
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8f 4f       	sbci	r24, 0xFF	; 255
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <__floatsisf+0x6c>
    1334:	88 23       	and	r24, r24
    1336:	11 f0       	breq	.+4      	; 0x133c <__floatsisf+0x48>
    1338:	96 e9       	ldi	r25, 0x96	; 150
    133a:	11 c0       	rjmp	.+34     	; 0x135e <__floatsisf+0x6a>
    133c:	77 23       	and	r23, r23
    133e:	21 f0       	breq	.+8      	; 0x1348 <__floatsisf+0x54>
    1340:	9e e8       	ldi	r25, 0x8E	; 142
    1342:	87 2f       	mov	r24, r23
    1344:	76 2f       	mov	r23, r22
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <__floatsisf+0x5e>
    1348:	66 23       	and	r22, r22
    134a:	71 f0       	breq	.+28     	; 0x1368 <__floatsisf+0x74>
    134c:	96 e8       	ldi	r25, 0x86	; 134
    134e:	86 2f       	mov	r24, r22
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	2a f0       	brmi	.+10     	; 0x1360 <__floatsisf+0x6c>
    1356:	9a 95       	dec	r25
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	da f7       	brpl	.-10     	; 0x1356 <__floatsisf+0x62>
    1360:	88 0f       	add	r24, r24
    1362:	96 95       	lsr	r25
    1364:	87 95       	ror	r24
    1366:	97 f9       	bld	r25, 7
    1368:	08 95       	ret

0000136a <__fp_cmp>:
    136a:	99 0f       	add	r25, r25
    136c:	00 08       	sbc	r0, r0
    136e:	55 0f       	add	r21, r21
    1370:	aa 0b       	sbc	r26, r26
    1372:	e0 e8       	ldi	r30, 0x80	; 128
    1374:	fe ef       	ldi	r31, 0xFE	; 254
    1376:	16 16       	cp	r1, r22
    1378:	17 06       	cpc	r1, r23
    137a:	e8 07       	cpc	r30, r24
    137c:	f9 07       	cpc	r31, r25
    137e:	c0 f0       	brcs	.+48     	; 0x13b0 <__fp_cmp+0x46>
    1380:	12 16       	cp	r1, r18
    1382:	13 06       	cpc	r1, r19
    1384:	e4 07       	cpc	r30, r20
    1386:	f5 07       	cpc	r31, r21
    1388:	98 f0       	brcs	.+38     	; 0x13b0 <__fp_cmp+0x46>
    138a:	62 1b       	sub	r22, r18
    138c:	73 0b       	sbc	r23, r19
    138e:	84 0b       	sbc	r24, r20
    1390:	95 0b       	sbc	r25, r21
    1392:	39 f4       	brne	.+14     	; 0x13a2 <__fp_cmp+0x38>
    1394:	0a 26       	eor	r0, r26
    1396:	61 f0       	breq	.+24     	; 0x13b0 <__fp_cmp+0x46>
    1398:	23 2b       	or	r18, r19
    139a:	24 2b       	or	r18, r20
    139c:	25 2b       	or	r18, r21
    139e:	21 f4       	brne	.+8      	; 0x13a8 <__fp_cmp+0x3e>
    13a0:	08 95       	ret
    13a2:	0a 26       	eor	r0, r26
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <__fp_cmp+0x3e>
    13a6:	a1 40       	sbci	r26, 0x01	; 1
    13a8:	a6 95       	lsr	r26
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	81 1d       	adc	r24, r1
    13ae:	81 1d       	adc	r24, r1
    13b0:	08 95       	ret

000013b2 <__fp_inf>:
    13b2:	97 f9       	bld	r25, 7
    13b4:	9f 67       	ori	r25, 0x7F	; 127
    13b6:	80 e8       	ldi	r24, 0x80	; 128
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	08 95       	ret

000013be <__fp_nan>:
    13be:	9f ef       	ldi	r25, 0xFF	; 255
    13c0:	80 ec       	ldi	r24, 0xC0	; 192
    13c2:	08 95       	ret

000013c4 <__fp_pscA>:
    13c4:	00 24       	eor	r0, r0
    13c6:	0a 94       	dec	r0
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	18 06       	cpc	r1, r24
    13ce:	09 06       	cpc	r0, r25
    13d0:	08 95       	ret

000013d2 <__fp_pscB>:
    13d2:	00 24       	eor	r0, r0
    13d4:	0a 94       	dec	r0
    13d6:	12 16       	cp	r1, r18
    13d8:	13 06       	cpc	r1, r19
    13da:	14 06       	cpc	r1, r20
    13dc:	05 06       	cpc	r0, r21
    13de:	08 95       	ret

000013e0 <__fp_round>:
    13e0:	09 2e       	mov	r0, r25
    13e2:	03 94       	inc	r0
    13e4:	00 0c       	add	r0, r0
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__fp_round+0xc>
    13e8:	88 23       	and	r24, r24
    13ea:	52 f0       	brmi	.+20     	; 0x1400 <__fp_round+0x20>
    13ec:	bb 0f       	add	r27, r27
    13ee:	40 f4       	brcc	.+16     	; 0x1400 <__fp_round+0x20>
    13f0:	bf 2b       	or	r27, r31
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <__fp_round+0x18>
    13f4:	60 ff       	sbrs	r22, 0
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__fp_round+0x20>
    13f8:	6f 5f       	subi	r22, 0xFF	; 255
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	8f 4f       	sbci	r24, 0xFF	; 255
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	08 95       	ret

00001402 <__fp_split3>:
    1402:	57 fd       	sbrc	r21, 7
    1404:	90 58       	subi	r25, 0x80	; 128
    1406:	44 0f       	add	r20, r20
    1408:	55 1f       	adc	r21, r21
    140a:	59 f0       	breq	.+22     	; 0x1422 <__fp_splitA+0x10>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	71 f0       	breq	.+28     	; 0x142c <__fp_splitA+0x1a>
    1410:	47 95       	ror	r20

00001412 <__fp_splitA>:
    1412:	88 0f       	add	r24, r24
    1414:	97 fb       	bst	r25, 7
    1416:	99 1f       	adc	r25, r25
    1418:	61 f0       	breq	.+24     	; 0x1432 <__fp_splitA+0x20>
    141a:	9f 3f       	cpi	r25, 0xFF	; 255
    141c:	79 f0       	breq	.+30     	; 0x143c <__fp_splitA+0x2a>
    141e:	87 95       	ror	r24
    1420:	08 95       	ret
    1422:	12 16       	cp	r1, r18
    1424:	13 06       	cpc	r1, r19
    1426:	14 06       	cpc	r1, r20
    1428:	55 1f       	adc	r21, r21
    142a:	f2 cf       	rjmp	.-28     	; 0x1410 <__fp_split3+0xe>
    142c:	46 95       	lsr	r20
    142e:	f1 df       	rcall	.-30     	; 0x1412 <__fp_splitA>
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <__fp_splitA+0x30>
    1432:	16 16       	cp	r1, r22
    1434:	17 06       	cpc	r1, r23
    1436:	18 06       	cpc	r1, r24
    1438:	99 1f       	adc	r25, r25
    143a:	f1 cf       	rjmp	.-30     	; 0x141e <__fp_splitA+0xc>
    143c:	86 95       	lsr	r24
    143e:	71 05       	cpc	r23, r1
    1440:	61 05       	cpc	r22, r1
    1442:	08 94       	sec
    1444:	08 95       	ret

00001446 <__fp_zero>:
    1446:	e8 94       	clt

00001448 <__fp_szero>:
    1448:	bb 27       	eor	r27, r27
    144a:	66 27       	eor	r22, r22
    144c:	77 27       	eor	r23, r23
    144e:	cb 01       	movw	r24, r22
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret

00001454 <__mulsf3>:
    1454:	0e 94 3d 0a 	call	0x147a	; 0x147a <__mulsf3x>
    1458:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_round>
    145c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_pscA>
    1460:	38 f0       	brcs	.+14     	; 0x1470 <__mulsf3+0x1c>
    1462:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fp_pscB>
    1466:	20 f0       	brcs	.+8      	; 0x1470 <__mulsf3+0x1c>
    1468:	95 23       	and	r25, r21
    146a:	11 f0       	breq	.+4      	; 0x1470 <__mulsf3+0x1c>
    146c:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_inf>
    1470:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_nan>
    1474:	11 24       	eor	r1, r1
    1476:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_szero>

0000147a <__mulsf3x>:
    147a:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_split3>
    147e:	70 f3       	brcs	.-36     	; 0x145c <__mulsf3+0x8>

00001480 <__mulsf3_pse>:
    1480:	95 9f       	mul	r25, r21
    1482:	c1 f3       	breq	.-16     	; 0x1474 <__mulsf3+0x20>
    1484:	95 0f       	add	r25, r21
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	55 1f       	adc	r21, r21
    148a:	62 9f       	mul	r22, r18
    148c:	f0 01       	movw	r30, r0
    148e:	72 9f       	mul	r23, r18
    1490:	bb 27       	eor	r27, r27
    1492:	f0 0d       	add	r31, r0
    1494:	b1 1d       	adc	r27, r1
    1496:	63 9f       	mul	r22, r19
    1498:	aa 27       	eor	r26, r26
    149a:	f0 0d       	add	r31, r0
    149c:	b1 1d       	adc	r27, r1
    149e:	aa 1f       	adc	r26, r26
    14a0:	64 9f       	mul	r22, r20
    14a2:	66 27       	eor	r22, r22
    14a4:	b0 0d       	add	r27, r0
    14a6:	a1 1d       	adc	r26, r1
    14a8:	66 1f       	adc	r22, r22
    14aa:	82 9f       	mul	r24, r18
    14ac:	22 27       	eor	r18, r18
    14ae:	b0 0d       	add	r27, r0
    14b0:	a1 1d       	adc	r26, r1
    14b2:	62 1f       	adc	r22, r18
    14b4:	73 9f       	mul	r23, r19
    14b6:	b0 0d       	add	r27, r0
    14b8:	a1 1d       	adc	r26, r1
    14ba:	62 1f       	adc	r22, r18
    14bc:	83 9f       	mul	r24, r19
    14be:	a0 0d       	add	r26, r0
    14c0:	61 1d       	adc	r22, r1
    14c2:	22 1f       	adc	r18, r18
    14c4:	74 9f       	mul	r23, r20
    14c6:	33 27       	eor	r19, r19
    14c8:	a0 0d       	add	r26, r0
    14ca:	61 1d       	adc	r22, r1
    14cc:	23 1f       	adc	r18, r19
    14ce:	84 9f       	mul	r24, r20
    14d0:	60 0d       	add	r22, r0
    14d2:	21 1d       	adc	r18, r1
    14d4:	82 2f       	mov	r24, r18
    14d6:	76 2f       	mov	r23, r22
    14d8:	6a 2f       	mov	r22, r26
    14da:	11 24       	eor	r1, r1
    14dc:	9f 57       	subi	r25, 0x7F	; 127
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	9a f0       	brmi	.+38     	; 0x1508 <__mulsf3_pse+0x88>
    14e2:	f1 f0       	breq	.+60     	; 0x1520 <__mulsf3_pse+0xa0>
    14e4:	88 23       	and	r24, r24
    14e6:	4a f0       	brmi	.+18     	; 0x14fa <__mulsf3_pse+0x7a>
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	bb 1f       	adc	r27, r27
    14ee:	66 1f       	adc	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	91 50       	subi	r25, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__mulsf3_pse+0x64>
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	51 05       	cpc	r21, r1
    14fe:	80 f0       	brcs	.+32     	; 0x1520 <__mulsf3_pse+0xa0>
    1500:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_inf>
    1504:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <__fp_szero>
    1508:	5f 3f       	cpi	r21, 0xFF	; 255
    150a:	e4 f3       	brlt	.-8      	; 0x1504 <__mulsf3_pse+0x84>
    150c:	98 3e       	cpi	r25, 0xE8	; 232
    150e:	d4 f3       	brlt	.-12     	; 0x1504 <__mulsf3_pse+0x84>
    1510:	86 95       	lsr	r24
    1512:	77 95       	ror	r23
    1514:	67 95       	ror	r22
    1516:	b7 95       	ror	r27
    1518:	f7 95       	ror	r31
    151a:	e7 95       	ror	r30
    151c:	9f 5f       	subi	r25, 0xFF	; 255
    151e:	c1 f7       	brne	.-16     	; 0x1510 <__mulsf3_pse+0x90>
    1520:	fe 2b       	or	r31, r30
    1522:	88 0f       	add	r24, r24
    1524:	91 1d       	adc	r25, r1
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	97 f9       	bld	r25, 7
    152c:	08 95       	ret

0000152e <__udivmodsi4>:
    152e:	a1 e2       	ldi	r26, 0x21	; 33
    1530:	1a 2e       	mov	r1, r26
    1532:	aa 1b       	sub	r26, r26
    1534:	bb 1b       	sub	r27, r27
    1536:	fd 01       	movw	r30, r26
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <__udivmodsi4_ep>

0000153a <__udivmodsi4_loop>:
    153a:	aa 1f       	adc	r26, r26
    153c:	bb 1f       	adc	r27, r27
    153e:	ee 1f       	adc	r30, r30
    1540:	ff 1f       	adc	r31, r31
    1542:	a2 17       	cp	r26, r18
    1544:	b3 07       	cpc	r27, r19
    1546:	e4 07       	cpc	r30, r20
    1548:	f5 07       	cpc	r31, r21
    154a:	20 f0       	brcs	.+8      	; 0x1554 <__udivmodsi4_ep>
    154c:	a2 1b       	sub	r26, r18
    154e:	b3 0b       	sbc	r27, r19
    1550:	e4 0b       	sbc	r30, r20
    1552:	f5 0b       	sbc	r31, r21

00001554 <__udivmodsi4_ep>:
    1554:	66 1f       	adc	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	88 1f       	adc	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	1a 94       	dec	r1
    155e:	69 f7       	brne	.-38     	; 0x153a <__udivmodsi4_loop>
    1560:	60 95       	com	r22
    1562:	70 95       	com	r23
    1564:	80 95       	com	r24
    1566:	90 95       	com	r25
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	bd 01       	movw	r22, r26
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret

00001572 <__muluhisi3>:
    1572:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__umulhisi3>
    1576:	a5 9f       	mul	r26, r21
    1578:	90 0d       	add	r25, r0
    157a:	b4 9f       	mul	r27, r20
    157c:	90 0d       	add	r25, r0
    157e:	a4 9f       	mul	r26, r20
    1580:	80 0d       	add	r24, r0
    1582:	91 1d       	adc	r25, r1
    1584:	11 24       	eor	r1, r1
    1586:	08 95       	ret

00001588 <__umulhisi3>:
    1588:	a2 9f       	mul	r26, r18
    158a:	b0 01       	movw	r22, r0
    158c:	b3 9f       	mul	r27, r19
    158e:	c0 01       	movw	r24, r0
    1590:	a3 9f       	mul	r26, r19
    1592:	70 0d       	add	r23, r0
    1594:	81 1d       	adc	r24, r1
    1596:	11 24       	eor	r1, r1
    1598:	91 1d       	adc	r25, r1
    159a:	b2 9f       	mul	r27, r18
    159c:	70 0d       	add	r23, r0
    159e:	81 1d       	adc	r24, r1
    15a0:	11 24       	eor	r1, r1
    15a2:	91 1d       	adc	r25, r1
    15a4:	08 95       	ret

000015a6 <sprintf>:
    15a6:	ae e0       	ldi	r26, 0x0E	; 14
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e9 ed       	ldi	r30, 0xD9	; 217
    15ac:	fa e0       	ldi	r31, 0x0A	; 10
    15ae:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__prologue_saves__+0x1c>
    15b2:	0d 89       	ldd	r16, Y+21	; 0x15
    15b4:	1e 89       	ldd	r17, Y+22	; 0x16
    15b6:	86 e0       	ldi	r24, 0x06	; 6
    15b8:	8c 83       	std	Y+4, r24	; 0x04
    15ba:	1a 83       	std	Y+2, r17	; 0x02
    15bc:	09 83       	std	Y+1, r16	; 0x01
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	9f e7       	ldi	r25, 0x7F	; 127
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	ae 01       	movw	r20, r28
    15c8:	47 5e       	subi	r20, 0xE7	; 231
    15ca:	5f 4f       	sbci	r21, 0xFF	; 255
    15cc:	6f 89       	ldd	r22, Y+23	; 0x17
    15ce:	78 8d       	ldd	r23, Y+24	; 0x18
    15d0:	ce 01       	movw	r24, r28
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <vfprintf>
    15d8:	ef 81       	ldd	r30, Y+7	; 0x07
    15da:	f8 85       	ldd	r31, Y+8	; 0x08
    15dc:	e0 0f       	add	r30, r16
    15de:	f1 1f       	adc	r31, r17
    15e0:	10 82       	st	Z, r1
    15e2:	2e 96       	adiw	r28, 0x0e	; 14
    15e4:	e4 e0       	ldi	r30, 0x04	; 4
    15e6:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__epilogue_restores__+0x1c>

000015ea <vfprintf>:
    15ea:	ab e0       	ldi	r26, 0x0B	; 11
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	eb ef       	ldi	r30, 0xFB	; 251
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__prologue_saves__>
    15f6:	6c 01       	movw	r12, r24
    15f8:	7b 01       	movw	r14, r22
    15fa:	8a 01       	movw	r16, r20
    15fc:	fc 01       	movw	r30, r24
    15fe:	17 82       	std	Z+7, r1	; 0x07
    1600:	16 82       	std	Z+6, r1	; 0x06
    1602:	83 81       	ldd	r24, Z+3	; 0x03
    1604:	81 ff       	sbrs	r24, 1
    1606:	cc c1       	rjmp	.+920    	; 0x19a0 <vfprintf+0x3b6>
    1608:	ce 01       	movw	r24, r28
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	3c 01       	movw	r6, r24
    160e:	f6 01       	movw	r30, r12
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	f7 01       	movw	r30, r14
    1614:	93 fd       	sbrc	r25, 3
    1616:	85 91       	lpm	r24, Z+
    1618:	93 ff       	sbrs	r25, 3
    161a:	81 91       	ld	r24, Z+
    161c:	7f 01       	movw	r14, r30
    161e:	88 23       	and	r24, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <vfprintf+0x3a>
    1622:	ba c1       	rjmp	.+884    	; 0x1998 <vfprintf+0x3ae>
    1624:	85 32       	cpi	r24, 0x25	; 37
    1626:	39 f4       	brne	.+14     	; 0x1636 <vfprintf+0x4c>
    1628:	93 fd       	sbrc	r25, 3
    162a:	85 91       	lpm	r24, Z+
    162c:	93 ff       	sbrs	r25, 3
    162e:	81 91       	ld	r24, Z+
    1630:	7f 01       	movw	r14, r30
    1632:	85 32       	cpi	r24, 0x25	; 37
    1634:	29 f4       	brne	.+10     	; 0x1640 <vfprintf+0x56>
    1636:	b6 01       	movw	r22, r12
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    163e:	e7 cf       	rjmp	.-50     	; 0x160e <vfprintf+0x24>
    1640:	91 2c       	mov	r9, r1
    1642:	21 2c       	mov	r2, r1
    1644:	31 2c       	mov	r3, r1
    1646:	ff e1       	ldi	r31, 0x1F	; 31
    1648:	f3 15       	cp	r31, r3
    164a:	d8 f0       	brcs	.+54     	; 0x1682 <vfprintf+0x98>
    164c:	8b 32       	cpi	r24, 0x2B	; 43
    164e:	79 f0       	breq	.+30     	; 0x166e <vfprintf+0x84>
    1650:	38 f4       	brcc	.+14     	; 0x1660 <vfprintf+0x76>
    1652:	80 32       	cpi	r24, 0x20	; 32
    1654:	79 f0       	breq	.+30     	; 0x1674 <vfprintf+0x8a>
    1656:	83 32       	cpi	r24, 0x23	; 35
    1658:	a1 f4       	brne	.+40     	; 0x1682 <vfprintf+0x98>
    165a:	23 2d       	mov	r18, r3
    165c:	20 61       	ori	r18, 0x10	; 16
    165e:	1d c0       	rjmp	.+58     	; 0x169a <vfprintf+0xb0>
    1660:	8d 32       	cpi	r24, 0x2D	; 45
    1662:	61 f0       	breq	.+24     	; 0x167c <vfprintf+0x92>
    1664:	80 33       	cpi	r24, 0x30	; 48
    1666:	69 f4       	brne	.+26     	; 0x1682 <vfprintf+0x98>
    1668:	23 2d       	mov	r18, r3
    166a:	21 60       	ori	r18, 0x01	; 1
    166c:	16 c0       	rjmp	.+44     	; 0x169a <vfprintf+0xb0>
    166e:	83 2d       	mov	r24, r3
    1670:	82 60       	ori	r24, 0x02	; 2
    1672:	38 2e       	mov	r3, r24
    1674:	e3 2d       	mov	r30, r3
    1676:	e4 60       	ori	r30, 0x04	; 4
    1678:	3e 2e       	mov	r3, r30
    167a:	2a c0       	rjmp	.+84     	; 0x16d0 <vfprintf+0xe6>
    167c:	f3 2d       	mov	r31, r3
    167e:	f8 60       	ori	r31, 0x08	; 8
    1680:	1d c0       	rjmp	.+58     	; 0x16bc <vfprintf+0xd2>
    1682:	37 fc       	sbrc	r3, 7
    1684:	2d c0       	rjmp	.+90     	; 0x16e0 <vfprintf+0xf6>
    1686:	20 ed       	ldi	r18, 0xD0	; 208
    1688:	28 0f       	add	r18, r24
    168a:	2a 30       	cpi	r18, 0x0A	; 10
    168c:	40 f0       	brcs	.+16     	; 0x169e <vfprintf+0xb4>
    168e:	8e 32       	cpi	r24, 0x2E	; 46
    1690:	b9 f4       	brne	.+46     	; 0x16c0 <vfprintf+0xd6>
    1692:	36 fc       	sbrc	r3, 6
    1694:	81 c1       	rjmp	.+770    	; 0x1998 <vfprintf+0x3ae>
    1696:	23 2d       	mov	r18, r3
    1698:	20 64       	ori	r18, 0x40	; 64
    169a:	32 2e       	mov	r3, r18
    169c:	19 c0       	rjmp	.+50     	; 0x16d0 <vfprintf+0xe6>
    169e:	36 fe       	sbrs	r3, 6
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <vfprintf+0xc4>
    16a2:	8a e0       	ldi	r24, 0x0A	; 10
    16a4:	98 9e       	mul	r9, r24
    16a6:	20 0d       	add	r18, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	92 2e       	mov	r9, r18
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <vfprintf+0xe6>
    16ae:	ea e0       	ldi	r30, 0x0A	; 10
    16b0:	2e 9e       	mul	r2, r30
    16b2:	20 0d       	add	r18, r0
    16b4:	11 24       	eor	r1, r1
    16b6:	22 2e       	mov	r2, r18
    16b8:	f3 2d       	mov	r31, r3
    16ba:	f0 62       	ori	r31, 0x20	; 32
    16bc:	3f 2e       	mov	r3, r31
    16be:	08 c0       	rjmp	.+16     	; 0x16d0 <vfprintf+0xe6>
    16c0:	8c 36       	cpi	r24, 0x6C	; 108
    16c2:	21 f4       	brne	.+8      	; 0x16cc <vfprintf+0xe2>
    16c4:	83 2d       	mov	r24, r3
    16c6:	80 68       	ori	r24, 0x80	; 128
    16c8:	38 2e       	mov	r3, r24
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0xe6>
    16cc:	88 36       	cpi	r24, 0x68	; 104
    16ce:	41 f4       	brne	.+16     	; 0x16e0 <vfprintf+0xf6>
    16d0:	f7 01       	movw	r30, r14
    16d2:	93 fd       	sbrc	r25, 3
    16d4:	85 91       	lpm	r24, Z+
    16d6:	93 ff       	sbrs	r25, 3
    16d8:	81 91       	ld	r24, Z+
    16da:	7f 01       	movw	r14, r30
    16dc:	81 11       	cpse	r24, r1
    16de:	b3 cf       	rjmp	.-154    	; 0x1646 <vfprintf+0x5c>
    16e0:	98 2f       	mov	r25, r24
    16e2:	9f 7d       	andi	r25, 0xDF	; 223
    16e4:	95 54       	subi	r25, 0x45	; 69
    16e6:	93 30       	cpi	r25, 0x03	; 3
    16e8:	28 f4       	brcc	.+10     	; 0x16f4 <vfprintf+0x10a>
    16ea:	0c 5f       	subi	r16, 0xFC	; 252
    16ec:	1f 4f       	sbci	r17, 0xFF	; 255
    16ee:	9f e3       	ldi	r25, 0x3F	; 63
    16f0:	99 83       	std	Y+1, r25	; 0x01
    16f2:	0d c0       	rjmp	.+26     	; 0x170e <vfprintf+0x124>
    16f4:	83 36       	cpi	r24, 0x63	; 99
    16f6:	31 f0       	breq	.+12     	; 0x1704 <vfprintf+0x11a>
    16f8:	83 37       	cpi	r24, 0x73	; 115
    16fa:	71 f0       	breq	.+28     	; 0x1718 <vfprintf+0x12e>
    16fc:	83 35       	cpi	r24, 0x53	; 83
    16fe:	09 f0       	breq	.+2      	; 0x1702 <vfprintf+0x118>
    1700:	59 c0       	rjmp	.+178    	; 0x17b4 <vfprintf+0x1ca>
    1702:	21 c0       	rjmp	.+66     	; 0x1746 <vfprintf+0x15c>
    1704:	f8 01       	movw	r30, r16
    1706:	80 81       	ld	r24, Z
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	0e 5f       	subi	r16, 0xFE	; 254
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	88 24       	eor	r8, r8
    1710:	83 94       	inc	r8
    1712:	91 2c       	mov	r9, r1
    1714:	53 01       	movw	r10, r6
    1716:	13 c0       	rjmp	.+38     	; 0x173e <vfprintf+0x154>
    1718:	28 01       	movw	r4, r16
    171a:	f2 e0       	ldi	r31, 0x02	; 2
    171c:	4f 0e       	add	r4, r31
    171e:	51 1c       	adc	r5, r1
    1720:	f8 01       	movw	r30, r16
    1722:	a0 80       	ld	r10, Z
    1724:	b1 80       	ldd	r11, Z+1	; 0x01
    1726:	36 fe       	sbrs	r3, 6
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <vfprintf+0x146>
    172a:	69 2d       	mov	r22, r9
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <vfprintf+0x14a>
    1730:	6f ef       	ldi	r22, 0xFF	; 255
    1732:	7f ef       	ldi	r23, 0xFF	; 255
    1734:	c5 01       	movw	r24, r10
    1736:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <strnlen>
    173a:	4c 01       	movw	r8, r24
    173c:	82 01       	movw	r16, r4
    173e:	f3 2d       	mov	r31, r3
    1740:	ff 77       	andi	r31, 0x7F	; 127
    1742:	3f 2e       	mov	r3, r31
    1744:	16 c0       	rjmp	.+44     	; 0x1772 <vfprintf+0x188>
    1746:	28 01       	movw	r4, r16
    1748:	22 e0       	ldi	r18, 0x02	; 2
    174a:	42 0e       	add	r4, r18
    174c:	51 1c       	adc	r5, r1
    174e:	f8 01       	movw	r30, r16
    1750:	a0 80       	ld	r10, Z
    1752:	b1 80       	ldd	r11, Z+1	; 0x01
    1754:	36 fe       	sbrs	r3, 6
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x174>
    1758:	69 2d       	mov	r22, r9
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x178>
    175e:	6f ef       	ldi	r22, 0xFF	; 255
    1760:	7f ef       	ldi	r23, 0xFF	; 255
    1762:	c5 01       	movw	r24, r10
    1764:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strnlen_P>
    1768:	4c 01       	movw	r8, r24
    176a:	f3 2d       	mov	r31, r3
    176c:	f0 68       	ori	r31, 0x80	; 128
    176e:	3f 2e       	mov	r3, r31
    1770:	82 01       	movw	r16, r4
    1772:	33 fc       	sbrc	r3, 3
    1774:	1b c0       	rjmp	.+54     	; 0x17ac <vfprintf+0x1c2>
    1776:	82 2d       	mov	r24, r2
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	88 16       	cp	r8, r24
    177c:	99 06       	cpc	r9, r25
    177e:	b0 f4       	brcc	.+44     	; 0x17ac <vfprintf+0x1c2>
    1780:	b6 01       	movw	r22, r12
    1782:	80 e2       	ldi	r24, 0x20	; 32
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    178a:	2a 94       	dec	r2
    178c:	f4 cf       	rjmp	.-24     	; 0x1776 <vfprintf+0x18c>
    178e:	f5 01       	movw	r30, r10
    1790:	37 fc       	sbrc	r3, 7
    1792:	85 91       	lpm	r24, Z+
    1794:	37 fe       	sbrs	r3, 7
    1796:	81 91       	ld	r24, Z+
    1798:	5f 01       	movw	r10, r30
    179a:	b6 01       	movw	r22, r12
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    17a2:	21 10       	cpse	r2, r1
    17a4:	2a 94       	dec	r2
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	82 1a       	sub	r8, r18
    17aa:	91 08       	sbc	r9, r1
    17ac:	81 14       	cp	r8, r1
    17ae:	91 04       	cpc	r9, r1
    17b0:	71 f7       	brne	.-36     	; 0x178e <vfprintf+0x1a4>
    17b2:	e8 c0       	rjmp	.+464    	; 0x1984 <vfprintf+0x39a>
    17b4:	84 36       	cpi	r24, 0x64	; 100
    17b6:	11 f0       	breq	.+4      	; 0x17bc <vfprintf+0x1d2>
    17b8:	89 36       	cpi	r24, 0x69	; 105
    17ba:	41 f5       	brne	.+80     	; 0x180c <vfprintf+0x222>
    17bc:	f8 01       	movw	r30, r16
    17be:	37 fe       	sbrs	r3, 7
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <vfprintf+0x1e6>
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	0c 5f       	subi	r16, 0xFC	; 252
    17cc:	1f 4f       	sbci	r17, 0xFF	; 255
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <vfprintf+0x1f6>
    17d0:	60 81       	ld	r22, Z
    17d2:	71 81       	ldd	r23, Z+1	; 0x01
    17d4:	07 2e       	mov	r0, r23
    17d6:	00 0c       	add	r0, r0
    17d8:	88 0b       	sbc	r24, r24
    17da:	99 0b       	sbc	r25, r25
    17dc:	0e 5f       	subi	r16, 0xFE	; 254
    17de:	1f 4f       	sbci	r17, 0xFF	; 255
    17e0:	f3 2d       	mov	r31, r3
    17e2:	ff 76       	andi	r31, 0x6F	; 111
    17e4:	3f 2e       	mov	r3, r31
    17e6:	97 ff       	sbrs	r25, 7
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <vfprintf+0x212>
    17ea:	90 95       	com	r25
    17ec:	80 95       	com	r24
    17ee:	70 95       	com	r23
    17f0:	61 95       	neg	r22
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	8f 4f       	sbci	r24, 0xFF	; 255
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	f0 68       	ori	r31, 0x80	; 128
    17fa:	3f 2e       	mov	r3, r31
    17fc:	2a e0       	ldi	r18, 0x0A	; 10
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	a3 01       	movw	r20, r6
    1802:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__ultoa_invert>
    1806:	88 2e       	mov	r8, r24
    1808:	86 18       	sub	r8, r6
    180a:	45 c0       	rjmp	.+138    	; 0x1896 <vfprintf+0x2ac>
    180c:	85 37       	cpi	r24, 0x75	; 117
    180e:	31 f4       	brne	.+12     	; 0x181c <vfprintf+0x232>
    1810:	23 2d       	mov	r18, r3
    1812:	2f 7e       	andi	r18, 0xEF	; 239
    1814:	b2 2e       	mov	r11, r18
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	25 c0       	rjmp	.+74     	; 0x1866 <vfprintf+0x27c>
    181c:	93 2d       	mov	r25, r3
    181e:	99 7f       	andi	r25, 0xF9	; 249
    1820:	b9 2e       	mov	r11, r25
    1822:	8f 36       	cpi	r24, 0x6F	; 111
    1824:	c1 f0       	breq	.+48     	; 0x1856 <vfprintf+0x26c>
    1826:	18 f4       	brcc	.+6      	; 0x182e <vfprintf+0x244>
    1828:	88 35       	cpi	r24, 0x58	; 88
    182a:	79 f0       	breq	.+30     	; 0x184a <vfprintf+0x260>
    182c:	b5 c0       	rjmp	.+362    	; 0x1998 <vfprintf+0x3ae>
    182e:	80 37       	cpi	r24, 0x70	; 112
    1830:	19 f0       	breq	.+6      	; 0x1838 <vfprintf+0x24e>
    1832:	88 37       	cpi	r24, 0x78	; 120
    1834:	21 f0       	breq	.+8      	; 0x183e <vfprintf+0x254>
    1836:	b0 c0       	rjmp	.+352    	; 0x1998 <vfprintf+0x3ae>
    1838:	e9 2f       	mov	r30, r25
    183a:	e0 61       	ori	r30, 0x10	; 16
    183c:	be 2e       	mov	r11, r30
    183e:	b4 fe       	sbrs	r11, 4
    1840:	0d c0       	rjmp	.+26     	; 0x185c <vfprintf+0x272>
    1842:	fb 2d       	mov	r31, r11
    1844:	f4 60       	ori	r31, 0x04	; 4
    1846:	bf 2e       	mov	r11, r31
    1848:	09 c0       	rjmp	.+18     	; 0x185c <vfprintf+0x272>
    184a:	34 fe       	sbrs	r3, 4
    184c:	0a c0       	rjmp	.+20     	; 0x1862 <vfprintf+0x278>
    184e:	29 2f       	mov	r18, r25
    1850:	26 60       	ori	r18, 0x06	; 6
    1852:	b2 2e       	mov	r11, r18
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x278>
    1856:	28 e0       	ldi	r18, 0x08	; 8
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <vfprintf+0x27c>
    185c:	20 e1       	ldi	r18, 0x10	; 16
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <vfprintf+0x27c>
    1862:	20 e1       	ldi	r18, 0x10	; 16
    1864:	32 e0       	ldi	r19, 0x02	; 2
    1866:	f8 01       	movw	r30, r16
    1868:	b7 fe       	sbrs	r11, 7
    186a:	07 c0       	rjmp	.+14     	; 0x187a <vfprintf+0x290>
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	0c 5f       	subi	r16, 0xFC	; 252
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <vfprintf+0x29c>
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 5f       	subi	r16, 0xFE	; 254
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	a3 01       	movw	r20, r6
    1888:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__ultoa_invert>
    188c:	88 2e       	mov	r8, r24
    188e:	86 18       	sub	r8, r6
    1890:	fb 2d       	mov	r31, r11
    1892:	ff 77       	andi	r31, 0x7F	; 127
    1894:	3f 2e       	mov	r3, r31
    1896:	36 fe       	sbrs	r3, 6
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <vfprintf+0x2ca>
    189a:	23 2d       	mov	r18, r3
    189c:	2e 7f       	andi	r18, 0xFE	; 254
    189e:	a2 2e       	mov	r10, r18
    18a0:	89 14       	cp	r8, r9
    18a2:	58 f4       	brcc	.+22     	; 0x18ba <vfprintf+0x2d0>
    18a4:	34 fe       	sbrs	r3, 4
    18a6:	0b c0       	rjmp	.+22     	; 0x18be <vfprintf+0x2d4>
    18a8:	32 fc       	sbrc	r3, 2
    18aa:	09 c0       	rjmp	.+18     	; 0x18be <vfprintf+0x2d4>
    18ac:	83 2d       	mov	r24, r3
    18ae:	8e 7e       	andi	r24, 0xEE	; 238
    18b0:	a8 2e       	mov	r10, r24
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <vfprintf+0x2d4>
    18b4:	b8 2c       	mov	r11, r8
    18b6:	a3 2c       	mov	r10, r3
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <vfprintf+0x2d6>
    18ba:	b8 2c       	mov	r11, r8
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <vfprintf+0x2d6>
    18be:	b9 2c       	mov	r11, r9
    18c0:	a4 fe       	sbrs	r10, 4
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <vfprintf+0x2f8>
    18c4:	fe 01       	movw	r30, r28
    18c6:	e8 0d       	add	r30, r8
    18c8:	f1 1d       	adc	r31, r1
    18ca:	80 81       	ld	r24, Z
    18cc:	80 33       	cpi	r24, 0x30	; 48
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <vfprintf+0x2ee>
    18d0:	9a 2d       	mov	r25, r10
    18d2:	99 7e       	andi	r25, 0xE9	; 233
    18d4:	a9 2e       	mov	r10, r25
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <vfprintf+0x300>
    18d8:	a2 fe       	sbrs	r10, 2
    18da:	06 c0       	rjmp	.+12     	; 0x18e8 <vfprintf+0x2fe>
    18dc:	b3 94       	inc	r11
    18de:	b3 94       	inc	r11
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <vfprintf+0x300>
    18e2:	8a 2d       	mov	r24, r10
    18e4:	86 78       	andi	r24, 0x86	; 134
    18e6:	09 f0       	breq	.+2      	; 0x18ea <vfprintf+0x300>
    18e8:	b3 94       	inc	r11
    18ea:	a3 fc       	sbrc	r10, 3
    18ec:	11 c0       	rjmp	.+34     	; 0x1910 <vfprintf+0x326>
    18ee:	a0 fe       	sbrs	r10, 0
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <vfprintf+0x314>
    18f2:	b2 14       	cp	r11, r2
    18f4:	88 f4       	brcc	.+34     	; 0x1918 <vfprintf+0x32e>
    18f6:	28 0c       	add	r2, r8
    18f8:	92 2c       	mov	r9, r2
    18fa:	9b 18       	sub	r9, r11
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <vfprintf+0x330>
    18fe:	b2 14       	cp	r11, r2
    1900:	60 f4       	brcc	.+24     	; 0x191a <vfprintf+0x330>
    1902:	b6 01       	movw	r22, r12
    1904:	80 e2       	ldi	r24, 0x20	; 32
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    190c:	b3 94       	inc	r11
    190e:	f7 cf       	rjmp	.-18     	; 0x18fe <vfprintf+0x314>
    1910:	b2 14       	cp	r11, r2
    1912:	18 f4       	brcc	.+6      	; 0x191a <vfprintf+0x330>
    1914:	2b 18       	sub	r2, r11
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x332>
    1918:	98 2c       	mov	r9, r8
    191a:	21 2c       	mov	r2, r1
    191c:	a4 fe       	sbrs	r10, 4
    191e:	10 c0       	rjmp	.+32     	; 0x1940 <vfprintf+0x356>
    1920:	b6 01       	movw	r22, r12
    1922:	80 e3       	ldi	r24, 0x30	; 48
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    192a:	a2 fe       	sbrs	r10, 2
    192c:	17 c0       	rjmp	.+46     	; 0x195c <vfprintf+0x372>
    192e:	a1 fc       	sbrc	r10, 1
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <vfprintf+0x34e>
    1932:	88 e7       	ldi	r24, 0x78	; 120
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x352>
    1938:	88 e5       	ldi	r24, 0x58	; 88
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b6 01       	movw	r22, r12
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <vfprintf+0x36e>
    1940:	8a 2d       	mov	r24, r10
    1942:	86 78       	andi	r24, 0x86	; 134
    1944:	59 f0       	breq	.+22     	; 0x195c <vfprintf+0x372>
    1946:	a1 fe       	sbrs	r10, 1
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x364>
    194a:	8b e2       	ldi	r24, 0x2B	; 43
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vfprintf+0x366>
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	a7 fc       	sbrc	r10, 7
    1952:	8d e2       	ldi	r24, 0x2D	; 45
    1954:	b6 01       	movw	r22, r12
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    195c:	89 14       	cp	r8, r9
    195e:	38 f4       	brcc	.+14     	; 0x196e <vfprintf+0x384>
    1960:	b6 01       	movw	r22, r12
    1962:	80 e3       	ldi	r24, 0x30	; 48
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    196a:	9a 94       	dec	r9
    196c:	f7 cf       	rjmp	.-18     	; 0x195c <vfprintf+0x372>
    196e:	8a 94       	dec	r8
    1970:	f3 01       	movw	r30, r6
    1972:	e8 0d       	add	r30, r8
    1974:	f1 1d       	adc	r31, r1
    1976:	80 81       	ld	r24, Z
    1978:	b6 01       	movw	r22, r12
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    1980:	81 10       	cpse	r8, r1
    1982:	f5 cf       	rjmp	.-22     	; 0x196e <vfprintf+0x384>
    1984:	22 20       	and	r2, r2
    1986:	09 f4       	brne	.+2      	; 0x198a <vfprintf+0x3a0>
    1988:	42 ce       	rjmp	.-892    	; 0x160e <vfprintf+0x24>
    198a:	b6 01       	movw	r22, r12
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <fputc>
    1994:	2a 94       	dec	r2
    1996:	f6 cf       	rjmp	.-20     	; 0x1984 <vfprintf+0x39a>
    1998:	f6 01       	movw	r30, r12
    199a:	86 81       	ldd	r24, Z+6	; 0x06
    199c:	97 81       	ldd	r25, Z+7	; 0x07
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <vfprintf+0x3ba>
    19a0:	8f ef       	ldi	r24, 0xFF	; 255
    19a2:	9f ef       	ldi	r25, 0xFF	; 255
    19a4:	2b 96       	adiw	r28, 0x0b	; 11
    19a6:	e2 e1       	ldi	r30, 0x12	; 18
    19a8:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__epilogue_restores__>

000019ac <strnlen_P>:
    19ac:	fc 01       	movw	r30, r24
    19ae:	05 90       	lpm	r0, Z+
    19b0:	61 50       	subi	r22, 0x01	; 1
    19b2:	70 40       	sbci	r23, 0x00	; 0
    19b4:	01 10       	cpse	r0, r1
    19b6:	d8 f7       	brcc	.-10     	; 0x19ae <strnlen_P+0x2>
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	8e 0f       	add	r24, r30
    19be:	9f 1f       	adc	r25, r31
    19c0:	08 95       	ret

000019c2 <strnlen>:
    19c2:	fc 01       	movw	r30, r24
    19c4:	61 50       	subi	r22, 0x01	; 1
    19c6:	70 40       	sbci	r23, 0x00	; 0
    19c8:	01 90       	ld	r0, Z+
    19ca:	01 10       	cpse	r0, r1
    19cc:	d8 f7       	brcc	.-10     	; 0x19c4 <strnlen+0x2>
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	8e 0f       	add	r24, r30
    19d4:	9f 1f       	adc	r25, r31
    19d6:	08 95       	ret

000019d8 <fputc>:
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	fb 01       	movw	r30, r22
    19e2:	23 81       	ldd	r18, Z+3	; 0x03
    19e4:	21 fd       	sbrc	r18, 1
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <fputc+0x16>
    19e8:	8f ef       	ldi	r24, 0xFF	; 255
    19ea:	9f ef       	ldi	r25, 0xFF	; 255
    19ec:	2c c0       	rjmp	.+88     	; 0x1a46 <fputc+0x6e>
    19ee:	22 ff       	sbrs	r18, 2
    19f0:	16 c0       	rjmp	.+44     	; 0x1a1e <fputc+0x46>
    19f2:	46 81       	ldd	r20, Z+6	; 0x06
    19f4:	57 81       	ldd	r21, Z+7	; 0x07
    19f6:	24 81       	ldd	r18, Z+4	; 0x04
    19f8:	35 81       	ldd	r19, Z+5	; 0x05
    19fa:	42 17       	cp	r20, r18
    19fc:	53 07       	cpc	r21, r19
    19fe:	44 f4       	brge	.+16     	; 0x1a10 <fputc+0x38>
    1a00:	a0 81       	ld	r26, Z
    1a02:	b1 81       	ldd	r27, Z+1	; 0x01
    1a04:	9d 01       	movw	r18, r26
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	31 83       	std	Z+1, r19	; 0x01
    1a0c:	20 83       	st	Z, r18
    1a0e:	8c 93       	st	X, r24
    1a10:	26 81       	ldd	r18, Z+6	; 0x06
    1a12:	37 81       	ldd	r19, Z+7	; 0x07
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
    1a16:	3f 4f       	sbci	r19, 0xFF	; 255
    1a18:	37 83       	std	Z+7, r19	; 0x07
    1a1a:	26 83       	std	Z+6, r18	; 0x06
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <fputc+0x6e>
    1a1e:	8b 01       	movw	r16, r22
    1a20:	ec 01       	movw	r28, r24
    1a22:	fb 01       	movw	r30, r22
    1a24:	00 84       	ldd	r0, Z+8	; 0x08
    1a26:	f1 85       	ldd	r31, Z+9	; 0x09
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	09 95       	icall
    1a2c:	89 2b       	or	r24, r25
    1a2e:	e1 f6       	brne	.-72     	; 0x19e8 <fputc+0x10>
    1a30:	d8 01       	movw	r26, r16
    1a32:	16 96       	adiw	r26, 0x06	; 6
    1a34:	8d 91       	ld	r24, X+
    1a36:	9c 91       	ld	r25, X
    1a38:	17 97       	sbiw	r26, 0x07	; 7
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	17 96       	adiw	r26, 0x07	; 7
    1a3e:	9c 93       	st	X, r25
    1a40:	8e 93       	st	-X, r24
    1a42:	16 97       	sbiw	r26, 0x06	; 6
    1a44:	ce 01       	movw	r24, r28
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <__ultoa_invert>:
    1a50:	fa 01       	movw	r30, r20
    1a52:	aa 27       	eor	r26, r26
    1a54:	28 30       	cpi	r18, 0x08	; 8
    1a56:	51 f1       	breq	.+84     	; 0x1aac <__ultoa_invert+0x5c>
    1a58:	20 31       	cpi	r18, 0x10	; 16
    1a5a:	81 f1       	breq	.+96     	; 0x1abc <__ultoa_invert+0x6c>
    1a5c:	e8 94       	clt
    1a5e:	6f 93       	push	r22
    1a60:	6e 7f       	andi	r22, 0xFE	; 254
    1a62:	6e 5f       	subi	r22, 0xFE	; 254
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	af 4f       	sbci	r26, 0xFF	; 255
    1a6c:	b1 e0       	ldi	r27, 0x01	; 1
    1a6e:	3e d0       	rcall	.+124    	; 0x1aec <__ultoa_invert+0x9c>
    1a70:	b4 e0       	ldi	r27, 0x04	; 4
    1a72:	3c d0       	rcall	.+120    	; 0x1aec <__ultoa_invert+0x9c>
    1a74:	67 0f       	add	r22, r23
    1a76:	78 1f       	adc	r23, r24
    1a78:	89 1f       	adc	r24, r25
    1a7a:	9a 1f       	adc	r25, r26
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	68 0f       	add	r22, r24
    1a80:	79 1f       	adc	r23, r25
    1a82:	8a 1f       	adc	r24, r26
    1a84:	91 1d       	adc	r25, r1
    1a86:	a1 1d       	adc	r26, r1
    1a88:	6a 0f       	add	r22, r26
    1a8a:	71 1d       	adc	r23, r1
    1a8c:	81 1d       	adc	r24, r1
    1a8e:	91 1d       	adc	r25, r1
    1a90:	a1 1d       	adc	r26, r1
    1a92:	20 d0       	rcall	.+64     	; 0x1ad4 <__ultoa_invert+0x84>
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <__ultoa_invert+0x48>
    1a96:	68 94       	set
    1a98:	3f 91       	pop	r19
    1a9a:	2a e0       	ldi	r18, 0x0A	; 10
    1a9c:	26 9f       	mul	r18, r22
    1a9e:	11 24       	eor	r1, r1
    1aa0:	30 19       	sub	r19, r0
    1aa2:	30 5d       	subi	r19, 0xD0	; 208
    1aa4:	31 93       	st	Z+, r19
    1aa6:	de f6       	brtc	.-74     	; 0x1a5e <__ultoa_invert+0xe>
    1aa8:	cf 01       	movw	r24, r30
    1aaa:	08 95       	ret
    1aac:	46 2f       	mov	r20, r22
    1aae:	47 70       	andi	r20, 0x07	; 7
    1ab0:	40 5d       	subi	r20, 0xD0	; 208
    1ab2:	41 93       	st	Z+, r20
    1ab4:	b3 e0       	ldi	r27, 0x03	; 3
    1ab6:	0f d0       	rcall	.+30     	; 0x1ad6 <__ultoa_invert+0x86>
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <__ultoa_invert+0x5c>
    1aba:	f6 cf       	rjmp	.-20     	; 0x1aa8 <__ultoa_invert+0x58>
    1abc:	46 2f       	mov	r20, r22
    1abe:	4f 70       	andi	r20, 0x0F	; 15
    1ac0:	40 5d       	subi	r20, 0xD0	; 208
    1ac2:	4a 33       	cpi	r20, 0x3A	; 58
    1ac4:	18 f0       	brcs	.+6      	; 0x1acc <__ultoa_invert+0x7c>
    1ac6:	49 5d       	subi	r20, 0xD9	; 217
    1ac8:	31 fd       	sbrc	r19, 1
    1aca:	40 52       	subi	r20, 0x20	; 32
    1acc:	41 93       	st	Z+, r20
    1ace:	02 d0       	rcall	.+4      	; 0x1ad4 <__ultoa_invert+0x84>
    1ad0:	a9 f7       	brne	.-22     	; 0x1abc <__ultoa_invert+0x6c>
    1ad2:	ea cf       	rjmp	.-44     	; 0x1aa8 <__ultoa_invert+0x58>
    1ad4:	b4 e0       	ldi	r27, 0x04	; 4
    1ad6:	a6 95       	lsr	r26
    1ad8:	97 95       	ror	r25
    1ada:	87 95       	ror	r24
    1adc:	77 95       	ror	r23
    1ade:	67 95       	ror	r22
    1ae0:	ba 95       	dec	r27
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__ultoa_invert+0x86>
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	71 05       	cpc	r23, r1
    1aea:	08 95       	ret
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	0a 2e       	mov	r0, r26
    1af2:	06 94       	lsr	r0
    1af4:	57 95       	ror	r21
    1af6:	47 95       	ror	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	ba 95       	dec	r27
    1afe:	c9 f7       	brne	.-14     	; 0x1af2 <__ultoa_invert+0xa2>
    1b00:	62 0f       	add	r22, r18
    1b02:	73 1f       	adc	r23, r19
    1b04:	84 1f       	adc	r24, r20
    1b06:	95 1f       	adc	r25, r21
    1b08:	a0 1d       	adc	r26, r0
    1b0a:	08 95       	ret

00001b0c <__prologue_saves__>:
    1b0c:	2f 92       	push	r2
    1b0e:	3f 92       	push	r3
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	ca 1b       	sub	r28, r26
    1b36:	db 0b       	sbc	r29, r27
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	09 94       	ijmp

00001b44 <__epilogue_restores__>:
    1b44:	2a 88       	ldd	r2, Y+18	; 0x12
    1b46:	39 88       	ldd	r3, Y+17	; 0x11
    1b48:	48 88       	ldd	r4, Y+16	; 0x10
    1b4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b56:	b9 84       	ldd	r11, Y+9	; 0x09
    1b58:	c8 84       	ldd	r12, Y+8	; 0x08
    1b5a:	df 80       	ldd	r13, Y+7	; 0x07
    1b5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1b5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1b60:	0c 81       	ldd	r16, Y+4	; 0x04
    1b62:	1b 81       	ldd	r17, Y+3	; 0x03
    1b64:	aa 81       	ldd	r26, Y+2	; 0x02
    1b66:	b9 81       	ldd	r27, Y+1	; 0x01
    1b68:	ce 0f       	add	r28, r30
    1b6a:	d1 1d       	adc	r29, r1
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	ed 01       	movw	r28, r26
    1b78:	08 95       	ret

00001b7a <_exit>:
    1b7a:	f8 94       	cli

00001b7c <__stop_program>:
    1b7c:	ff cf       	rjmp	.-2      	; 0x1b7c <__stop_program>
